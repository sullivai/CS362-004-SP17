        -:    0:Source:testUpdateCoins.c
        -:    0:Graph:testUpdateCoins.gcno
        -:    0:Data:testUpdateCoins.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define NOISY_TEST 1
        -:    9:
        1:   10:int main() {
        -:   11:    int i;
        1:   12:    int seed = 1000;
        1:   13:    int numPlayer = MAX_PLAYERS;
        1:   14:    int maxBonus = 10;
        -:   15:    int p,r, handCount;
        -:   16:    int bonus;
        1:   17:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   18:                smithy, village, baron, great_hall};
        -:   19:    struct gameState G;
        1:   20:    int maxHandCount = 5;
        -:   21:
        -:   22:    int coppers[MAX_HAND];
        -:   23:    int silvers[MAX_HAND];
        -:   24:    int golds[MAX_HAND];
      501:   25:    for (i = 0; i < MAX_HAND; i++){
      500:   26:        coppers[i] = copper;
      500:   27:        silvers[i] = silver;
      500:   28:        golds[i] = gold;
        -:   29:    }
        -:   30:
        1:   31:    printf("TESTING updateCoins():\n");
        5:   32:    for (p = 0; p < numPlayer; p++){
       24:   33:        for (handCount = 1; handCount <= maxHandCount; handCount++){
      240:   34:            for(bonus = 0; bonus <= maxBonus; bonus++){
        -:   35:#if (NOISY_TEST == 1)
      220:   36:                printf("Test player %d with %d treasure cards and %d bonus.\n",p,handCount,bonus);
        -:   37:#endif
      220:   38:                memset(&G,'\0',sizeof(struct gameState));
      220:   39:                r = initializeGame(numPlayer,k,seed,&G);
      220:   40:                G.handCount[p] = handCount;
      220:   41:                memcpy(G.hand[p],coppers,sizeof(int)*handCount);
      220:   42:                updateCoins(p,&G,bonus);
        -:   43:#if (NOISY_TEST == 1)
      220:   44:                printf("G.coins = %d, expected = %d\n",G.coins,handCount*1+bonus);
        -:   45:#endif
      220:   46:                assert(G.coins == handCount*1+bonus);
      220:   47:                memcpy(G.hand[p],silvers,sizeof(int)*handCount);
      220:   48:                updateCoins(p,&G,bonus);
        -:   49:#if (NOISY_TEST == 1)
      220:   50:                printf("G.coins = %d, expected = %d\n",G.coins,handCount*2+bonus);
        -:   51:#endif
      220:   52:                assert(G.coins == handCount*2+bonus);
      220:   53:                memcpy(G.hand[p],golds,sizeof(int)*handCount);
      220:   54:                updateCoins(p,&G,bonus);
        -:   55:#if (NOISY_TEST == 1)
      220:   56:                printf("G.coins = %d, expected = %d\n",G.coins,handCount*3+bonus);
        -:   57:#endif
      220:   58:                assert(G.coins == handCount*3+bonus);
        -:   59:            }
        -:   60:        }
        -:   61:    }
        1:   62:    printf("All tests passed.\n");
        1:   63:    return 0;
        -:   64:}
