        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Aimee Sullivan
        -:    2:// CS 362-400 Assignment 3
        -:    3:// 30 April 2017
        -:    4:// unittest4.c
        -:    5:// Unit tests for gainCard() function in dominion.c
        -:    6:// Structure of code is based on testUpdateCoins.c provided in Assignment 3 Assistance 2
        -:    7:// in course materials.
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:
        -:   16:// http://stackoverflow.com/a/12989329
        -:   17:#define ASSERT2(xy,MSG) do {\
        -:   18:!(xy) ? printf("     TEST FAILED: %s\n",MSG) : printf("TEST PASSED: %s\n",MSG);\
        -:   19:} while(0)
        -:   20:
        -:   21:
        -:   22:
function main called 1 returned 100% blocks executed 71%
        1:   23:int main() {
        -:   24:    char msg[1024];
        -:   25:    int result; 
        1:   26:    int seed = 1000;
        1:   27:    int numPlayer = MAX_PLAYERS;
        -:   28:    int r;
        1:   29:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   30:                smithy, village, baron, great_hall};
        -:   31:    struct gameState G;
        -:   32:    struct gameState tmp;    
        -:   33:
        1:   34:    printf("\n\n#####################################################\n");
call    0 returned 100%
        1:   35:    printf("##             TESTING gainCard():                 ##\n");
call    0 returned 100%
        1:   36:    printf("#####################################################\n");
call    0 returned 100%
        -:   37:    // Test 1: Card not available, do not gain
        1:   38:    memset(&G,'\0',sizeof(struct gameState));
        1:   39:    r = initializeGame(numPlayer,k,seed,&G);
call    0 returned 100%
        1:   40:    assert(!r);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   41:    G.supplyCount[adventurer] = 0;  // make sure there's no card
        1:   42:    tmp = G;                        // save current info
        1:   43:    result = gainCard(adventurer,&G,0,G.whoseTurn);
call    0 returned 100%
        1:   44:    printf("Test 1: Card not available\n");
call    0 returned 100%
        -:   45:    // Return -1
        1:   46:    sprintf(msg,"Card not available.");
        1:   47:    ASSERT2(result == -1, msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   48:    // No change to supply
        1:   49:    sprintf(msg,"Card supply count unchanged.");
        1:   50:    ASSERT2(G.supplyCount[adventurer] == tmp.supplyCount[adventurer], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   51:    // No change to player deck
        1:   52:    sprintf(msg,"Player deck count unchanged.");
        1:   53:    ASSERT2(G.deckCount[G.whoseTurn] == tmp.deckCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   54:    // No change to player hand
        1:   55:    sprintf(msg,"Player hand count unchanged.");
        1:   56:    ASSERT2(G.handCount[G.whoseTurn] == tmp.handCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   57:    // No change to player discard
        1:   58:    sprintf(msg,"Player discard count unchanged.");
        1:   59:    ASSERT2(G.discardCount[G.whoseTurn] == tmp.discardCount[G.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   60:
        -:   61:    // Test 2: Add card to deck
        1:   62:    memset(&G,'\0',sizeof(struct gameState));
        1:   63:    r = initializeGame(numPlayer,k,seed,&G);
call    0 returned 100%
        1:   64:    assert(!r);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   65:    G.supplyCount[adventurer] = 1;  // make sure there's a card
        1:   66:    tmp = G;                        // save current info
        1:   67:    result = gainCard(adventurer,&G,1,G.whoseTurn);
call    0 returned 100%
        1:   68:    printf("\nTest 2: Add card to deck\n");
call    0 returned 100%
        -:   69:    // Supply - 1
        1:   70:    sprintf(msg,"Card supply adjusted.");
        1:   71:    ASSERT2(G.supplyCount[adventurer] == tmp.supplyCount[adventurer]-1, msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   72:    // Deck + 1
        1:   73:    sprintf(msg,"Deck adjusted.");
        1:   74:    ASSERT2(G.deckCount[G.whoseTurn] == tmp.deckCount[tmp.whoseTurn]+1, msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   75:    // No change to hand
        1:   76:    sprintf(msg,"Player hand count unchanged.");
        1:   77:    ASSERT2(G.handCount[G.whoseTurn] == tmp.handCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   78:    // No change to discard
        1:   79:    sprintf(msg,"Player discard count unchanged.");
        1:   80:    ASSERT2(G.discardCount[G.whoseTurn] == tmp.discardCount[G.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   81:    // Card is in player deck
        1:   82:    sprintf(msg,"Card is in deck.");
        1:   83:    ASSERT2(G.deck[G.whoseTurn][G.deckCount[G.whoseTurn]-1] == adventurer,msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   84:
        -:   85:    // Test 3: Add card to hand
        1:   86:    memset(&G,'\0',sizeof(struct gameState));
        1:   87:    r = initializeGame(numPlayer,k,seed,&G);
call    0 returned 100%
        1:   88:    assert(!r);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   89:    G.supplyCount[adventurer] = 1;  // make sure there's a card
        1:   90:    tmp = G;                        // save current info
        1:   91:    result = gainCard(adventurer,&G,2,G.whoseTurn);
call    0 returned 100%
        1:   92:    printf("\nTest 3: Add card to hand\n");
call    0 returned 100%
        -:   93:    // Supply - 1
        1:   94:    sprintf(msg,"Card supply adjusted.");
        1:   95:    ASSERT2(G.supplyCount[adventurer] == tmp.supplyCount[adventurer]-1, msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   96:    // No change to deck
        1:   97:    sprintf(msg,"Player deck count unchanged.");
        1:   98:    ASSERT2(G.deckCount[G.whoseTurn] == tmp.deckCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:   99:    // Hand + 1
        1:  100:    sprintf(msg,"Hand adjusted.");
        1:  101:    ASSERT2(G.handCount[G.whoseTurn] == tmp.handCount[tmp.whoseTurn]+1, msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  102:    // No change to discard
        1:  103:    sprintf(msg,"Player discard count unchanged.");
        1:  104:    ASSERT2(G.discardCount[G.whoseTurn] == tmp.discardCount[G.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  105:    // Card is in player hand
        1:  106:    sprintf(msg,"Card is in hand.");
        1:  107:    ASSERT2(G.hand[G.whoseTurn][G.handCount[G.whoseTurn]-1] == adventurer,msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  108:
        -:  109:    // Test 4: Add card to discard
        1:  110:    memset(&G,'\0',sizeof(struct gameState));
        1:  111:    r = initializeGame(numPlayer,k,seed,&G);
call    0 returned 100%
        1:  112:    assert(!r);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  113:    G.supplyCount[adventurer] = 1;  // make sure there's a card
        1:  114:    tmp = G;                        // save current info
        1:  115:    result = gainCard(adventurer,&G,0,G.whoseTurn);
call    0 returned 100%
        1:  116:    printf("\nTest 4: Add card to discard\n");
call    0 returned 100%
        -:  117:    // Supply - 1
        1:  118:    sprintf(msg,"Card supply adjusted.");
        1:  119:    ASSERT2(G.supplyCount[adventurer] == tmp.supplyCount[adventurer]-1, msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  120:    // No change to deck
        1:  121:    sprintf(msg,"Player deck count unchanged.");
        1:  122:    ASSERT2(G.deckCount[G.whoseTurn] == tmp.deckCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  123:    // No change to hand
        1:  124:    sprintf(msg,"Player hand count unchanged.");
        1:  125:    ASSERT2(G.handCount[G.whoseTurn] == tmp.handCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  126:    // Discard + 1
        1:  127:    sprintf(msg,"Discard adjusted.");
        1:  128:    ASSERT2(G.discardCount[G.whoseTurn] == tmp.discardCount[tmp.whoseTurn]+1, msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  129:    // Card is in player discard pile
        1:  130:    sprintf(msg,"Card is in discard pile.");
        1:  131:    ASSERT2(G.discard[G.whoseTurn][G.discardCount[G.whoseTurn]-1] == adventurer,msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  132:
        -:  133:    // Test 5: Add card to discard
        1:  134:    memset(&G,'\0',sizeof(struct gameState));
        1:  135:    r = initializeGame(numPlayer,k,seed,&G);
call    0 returned 100%
        1:  136:    assert(!r);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  137:    G.supplyCount[adventurer] = 0;  // make sure there's a card
        1:  138:    tmp = G;                        // save current info
        1:  139:    result = gainCard(adventurer,&G,0,G.whoseTurn);
call    0 returned 100%
        1:  140:    printf("\nTest 4: Add card to discard\n");
call    0 returned 100%
        -:  141:    // Supply - 1
        1:  142:    sprintf(msg,"Card supply adjusted.");
        1:  143:    ASSERT2(G.supplyCount[adventurer] == tmp.supplyCount[adventurer]-1, msg);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        -:  144:    // No change to deck
        1:  145:    sprintf(msg,"Player deck count unchanged.");
        1:  146:    ASSERT2(G.deckCount[G.whoseTurn] == tmp.deckCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  147:    // No change to hand
        1:  148:    sprintf(msg,"Player hand count unchanged.");
        1:  149:    ASSERT2(G.handCount[G.whoseTurn] == tmp.handCount[tmp.whoseTurn], msg);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        -:  150:    // Discard + 1
        1:  151:    sprintf(msg,"Discard adjusted.");
        1:  152:    ASSERT2(G.discardCount[G.whoseTurn] == tmp.discardCount[tmp.whoseTurn]+1, msg);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        -:  153:    // Card is in player discard pile
        1:  154:    sprintf(msg,"Card is in discard pile.");
        1:  155:    ASSERT2(G.discard[G.whoseTurn][G.discardCount[G.whoseTurn]-1] == adventurer,msg);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        1:  156:    return 0;
        -:  157:}
