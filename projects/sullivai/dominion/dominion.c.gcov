        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:24
        -:    0:Programs:23
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 8730 returned 100% blocks executed 83%
     8730:    8:int compare(const void* a, const void* b) {
     8730:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     8730:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     2328:   12:    return -1;
     6402:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 173 returned 100% blocks executed 92%
      173:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      173:   44:  SelectStream(1);
call    0 returned 100%
      173:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      173:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      173:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1903:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    19030:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    17300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      173:   73:  if (numPlayers == 2)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:   74:    {
       55:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      118:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      118:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      173:   87:  if (numPlayers == 2)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:   88:    {
       55:   89:      state->supplyCount[estate] = 8;
       55:   90:      state->supplyCount[duchy] = 8;
       55:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      118:   95:      state->supplyCount[estate] = 12;
      118:   96:      state->supplyCount[duchy] = 12;
      118:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      173:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      173:  102:  state->supplyCount[silver] = 40;
      173:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3633:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    28545:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    26815:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1730:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:  114:		{
      456:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      228:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1502:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1730:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    25085:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      755:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  139:    {
      582:  140:      state->deckCount[i] = 0;
     2328:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     1746:  143:	  state->deck[i][j] = estate;
     1746:  144:	  state->deckCount[i]++;
        -:  145:	}
     4656:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     4074:  148:	  state->deck[i][j] = copper;
     4074:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      755:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  155:    {
      582:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      755:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      582:  166:      state->handCount[i] = 0;
      582:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4844:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     4671:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      173:  182:  state->outpostPlayed = 0;
      173:  183:  state->phase = 0;
      173:  184:  state->numActions = 1;
      173:  185:  state->numBuys = 1;
      173:  186:  state->playedCardCount = 0;
      173:  187:  state->whoseTurn = 0;
      173:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1038:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      865:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      173:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      173:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 582 returned 100% blocks executed 94%
      582:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      582:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      582:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      582:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6984:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5820:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     5820:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5820:  217:    newDeckPos++;
    20252:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    14432:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5820:  221:    state->deckCount[player]--;
        -:  222:  }
     6402:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5820:  224:    state->deck[player][i] = newDeck[i];
     5820:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      582:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 8 returned 100% blocks executed 100%
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        2:  285:    return -1;
        6:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        4:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        2:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 22 returned 100% blocks executed 100%
       22:  320:int supplyCount(int card, struct gameState *state) {
       22:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 5000 returned 100% blocks executed 100%
     5000:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     5000:  326:  int count = 0;
        -:  327:
    12500:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  329:    {
     7500:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
    16000:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  334:    {
    11000:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
    19500:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  339:    {
    14500:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  341:    }
        -:  342:
     5000:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 55 returned 100% blocks executed 100%
       55:  346:int whoseTurn(struct gameState *state) {
       55:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 192 returned 100% blocks executed 100%
      192:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      192:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        4:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      188:  401:  j = 0;
     4888:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     4700:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      432:  406:	  j++;
        -:  407:	}
        -:  408:    }
      188:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       80:  411:      return 1;
        -:  412:    }
        -:  413:
      108:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 3000 returned 100% blocks executed 100%
     3000:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     3000:  420:  int score = 0;
        -:  421:  //score from hand
     9000:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  423:    {
     6000:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     9000:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  434:    {
     6000:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     9000:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
     6000:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:  452:    }
        -:  453:
     3000:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1031 returned 100% blocks executed 38%
     1031:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1031:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1031:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1031:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1031:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1031:  576:    state->deckCount[player]--;
     1031:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1031:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 30 returned 100% blocks executed 20%
       30:  583:int getCost(int cardNumber)
        -:  584:{
       30:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 40%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 40%
branch  5 taken 10%
branch  6 taken 10%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       12:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
       12:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Play adventurer
function play_Adventurer called 18 returned 100% blocks executed 64%
       18:  648:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  649:  int cardDrawn;
       18:  650:  int drawntreasure=0;
       18:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  int temphand[MAX_HAND];
        -:  653:    
       72:  654:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       36:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:      shuffle(currentPlayer, state);
call    0 never executed
        -:  657:    }
       36:  658:    drawCard(currentPlayer, state);
call    0 returned 100%
       36:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       36:  660:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
       36:  661:      drawntreasure++;
        -:  662:      //drawntreasure+= drawntreasure;
        -:  663:    else{
    #####:  664:      temphand[z]=cardDrawn;
    #####:  665:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:      z++;
        -:  667:    }
        -:  668:  }
       36:  669:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  670:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:    z=z-1;
        -:  672:  }
       18:  673:}
        -:  674:
        -:  675:// Play council room
function play_Council_room called 14 returned 100% blocks executed 100%
       14:  676:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  677:  int i;
        -:  678:  //+4 Cards
       70:  679:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  680:  {
       56:  681:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  682:  }
        -:  683:			
        -:  684:  //+1 Buy
       14:  685:  state->numBuys++;
        -:  686:			
        -:  687:  //Each other player draws a card
       46:  688:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  689:  {
       32:  690:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  691:    {
       18:  692:      drawCard(i, state);
call    0 returned 100%
        -:  693:    }
        -:  694:  }
        -:  695:			
        -:  696:  //put played card in played card pile
       14:  697:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  698:			
       14:  699:}
        -:  700:
        -:  701:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  702:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  703:  int i;
        -:  704:  
        -:  705:  int temphand[MAX_HAND];
        -:  706:  //gain card with cost up to 5
        -:  707:  //Backup hand
    #####:  708:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  709:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:  }
        -:  712:  //Backup hand
        -:  713:
        -:  714:  //Update Coins for Buy
    #####:  715:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  716:  i = 0;//Condition to loop on
    #####:  717:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  718:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  719:      if (DEBUG)
        -:  720:        printf("None of that card left, sorry!\n");
        -:  721:
        -:  722:      if (DEBUG){
        -:  723:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:      }
        -:  725:    }
    #####:  726:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  727:      printf("That card is too expensive!\n");
call    0 never executed
        -:  728:
        -:  729:      if (DEBUG){
        -:  730:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:      }
        -:  732:    }
        -:  733:    else{
        -:  734:
        -:  735:      if (DEBUG){
        -:  736:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:      }
        -:  738:
    #####:  739:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  740:      i = 0;//No more buying cards
        -:  741:
        -:  742:      if (DEBUG){
        -:  743:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:      }
        -:  745:
        -:  746:    }
        -:  747:  }     
        -:  748:
        -:  749:  //Reset Hand
    #####:  750:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  751:    state->hand[currentPlayer][i] = temphand[i];
    #####:  752:    temphand[i] = -1;
        -:  753:  }
        -:  754:  //Reset Hand
        -:  755:  
    #####:  756:}
        -:  757:
        -:  758:// Play mine
function play_Mine called 9 returned 100% blocks executed 90%
        9:  759:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  760:  int i,j;
        9:  761:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  762:
        9:  763:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  764:    {
    #####:  765:      return -1;
        -:  766:    }
        -:  767:		
        9:  768:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  769:    {
    #####:  770:      return -1;
        -:  771:    }
        -:  772:
        9:  773:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  774:    {
        3:  775:      return -1;
        -:  776:    }
        -:  777:
        6:  778:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  779:
        -:  780:    //discard card from hand
        6:  781:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  782:
        -:  783:    //discard trashed card
       12:  784:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  785:    {
       12:  786:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  787:      {
        6:  788:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        6:  789:        break;
        -:  790:      }
        -:  791:    }
        6:  792:  return 0;
        -:  793:}
        -:  794:
        -:  795:// Play smithy
function play_Smithy called 14 returned 100% blocks executed 100%
       14:  796:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  797:  int i;
        -:  798:  //+3 Cards
       70:  799:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  800:    {
       56:  801:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  802:    }
        -:  803:			
        -:  804:  //discard card from hand
       14:  805:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       14:  806:}
        -:  807:    
        -:  808:    
function cardEffect called 55 returned 100% blocks executed 6%
       55:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int index;
       55:  815:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       55:  816:  int nextPlayer = currentPlayer + 1;
       55:  817:  int tributeRevealedCards[2] = {-1, -1};
       55:  818:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  819:    nextPlayer = 0;
        -:  820:  }
        -:  821:  
        -:  822:  //uses switch to select card and perform actions
       55:  823:  switch( card ) 
branch  0 taken 33%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 16%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  824:    {
        -:  825:    case adventurer:
       18:  826:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
       18:  827:      return 0;
        -:  828:			
        -:  829:    case council_room:
       14:  830:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
       14:  831:      return 0;
        -:  832:			
        -:  833:    case feast:
    #####:  834:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  835:      return 0;
        -:  836:			
        -:  837:    case gardens:
    #####:  838:      return -1;
        -:  839:			
        -:  840:    case mine:
        9:  841:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        9:  842:      return 0;
        -:  843:			
        -:  844:    case remodel:
    #####:  845:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  859:	{
    #####:  860:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  861:	    {
    #####:  862:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  863:	      break;
        -:  864:	    }
        -:  865:	}
    #####:  866:      return 0;
        -:  867:		
        -:  868:    case smithy:
       14:  869:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
       14:  870:      return 0;
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
call    0 never executed
        -:  875:			
        -:  876:      //+2 Actions
    #####:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 40 returned 100% blocks executed 78%
       40: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       40: 1260:  if (trashFlag < 1)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1261:    {
        -: 1262:      //add card to played pile
       26: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       26: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       40: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       40: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       40: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       40: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       40: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       40: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       40: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 16 returned 100% blocks executed 100%
       16: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
       16: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
        -: 1300:    {
        2: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
       14: 1309:  if (toFlag == 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1310:    {
        2: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1312:      state->deckCount[player]++;
        -: 1313:    }
       12: 1314:  else if (toFlag == 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1315:    {
        8: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        8: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
        4: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
       14: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
       14: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 173 returned 100% blocks executed 82%
      173: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
      173: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     1038: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
      865: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
      692: 1343:	  state->coins += 1;
        -: 1344:	}
      173: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
      173: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
      173: 1356:  state->coins += bonus;
        -: 1357:
      173: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
