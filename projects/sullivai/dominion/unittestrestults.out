        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:62
        -:    0:Programs:62
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 46980 returned 100% blocks executed 83%
    46980:    8:int compare(const void* a, const void* b) {
    46980:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    46980:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    12528:   12:    return -1;
    34452:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 783 returned 100% blocks executed 89%
      783:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      783:   44:  SelectStream(1);
call    0 returned 100%
      783:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      783:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      783:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     8613:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    86130:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    78300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      783:   73:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      783:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      783:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      783:   87:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      783:   95:      state->supplyCount[estate] = 12;
      783:   96:      state->supplyCount[duchy] = 12;
      783:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      783:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      783:  102:  state->supplyCount[silver] = 40;
      783:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    16443:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   129195:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   121365:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     7830:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     3132:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1566:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     6264:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     7830:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   113535:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3915:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  139:    {
     3132:  140:      state->deckCount[i] = 0;
    12528:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     9396:  143:	  state->deck[i][j] = estate;
     9396:  144:	  state->deckCount[i]++;
        -:  145:	}
    25056:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    21924:  148:	  state->deck[i][j] = copper;
    21924:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3915:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  155:    {
     3132:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3915:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3132:  166:      state->handCount[i] = 0;
     3132:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    21924:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    21141:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      783:  182:  state->outpostPlayed = 0;
      783:  183:  state->phase = 0;
      783:  184:  state->numActions = 1;
      783:  185:  state->numBuys = 1;
      783:  186:  state->playedCardCount = 0;
      783:  187:  state->whoseTurn = 0;
      783:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     4698:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     3915:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      783:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      783:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3132 returned 100% blocks executed 94%
     3132:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3132:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3132:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
     3132:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    37584:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    31320:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    31320:  216:    newDeck[newDeckPos] = state->deck[player][card];
    31320:  217:    newDeckPos++;
   108837:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    77517:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    31320:  221:    state->deckCount[player]--;
        -:  222:  }
    34452:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    31320:  224:    state->deck[player][i] = newDeck[i];
    31320:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3132:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 28 returned 100% blocks executed 100%
       28:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       28:  280:  who = state->whoseTurn;
        -:  281:
       28:  282:  if (state->numBuys < 1){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
       10:  285:    return -1;
       18:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        6:  289:    return -1;
       12:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        6:  293:    return -1;
        -:  294:  } else {
        6:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        6:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        6:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        6:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        6:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 44 returned 100% blocks executed 100%
       44:  320:int supplyCount(int card, struct gameState *state) {
       44:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 27680 returned 100% blocks executed 100%
    27680:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    27680:  326:  int count = 0;
        -:  327:
    69470:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  329:    {
    41790:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
    88720:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  334:    {
    61040:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
   107970:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  339:    {
    80290:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  341:    }
        -:  342:
    27680:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 7306 returned 100% blocks executed 100%
     7306:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     7306:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  396:    {
      780:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     6526:  401:  j = 0;
   169676:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
   163150:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  405:	{
    17457:  406:	  j++;
        -:  407:	}
        -:  408:    }
     6526:  409:  if ( j >= 3)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:  410:    {
     4704:  411:      return 1;
        -:  412:    }
        -:  413:
     1822:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 16680 returned 100% blocks executed 100%
    16680:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    16680:  420:  int score = 0;
        -:  421:  //score from hand
    50040:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  423:    {
    33360:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    50040:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  434:    {
    33360:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    33360:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    50040:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
    33360:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
    33360:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
    33360:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
    33360:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
    33360:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
    33360:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:  452:    }
        -:  453:
    16680:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 3915 returned 100% blocks executed 38%
     3915:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     3915:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     3915:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     3915:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3915:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3915:  576:    state->deckCount[player]--;
     3915:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     3915:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 38 returned 100% blocks executed 10%
       38:  583:int getCost(int cardNumber)
        -:  584:{
       38:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       38:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Play adventurer
function play_Adventurer called 0 returned 0% blocks executed 0%
    #####:  648:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  649:  int cardDrawn;
    #####:  650:  int drawntreasure=0;
    #####:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  int temphand[MAX_HAND];
        -:  653:    
    #####:  654:  while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  656:      shuffle(currentPlayer, state);
call    0 never executed
        -:  657:    }
    #####:  658:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  660:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  661:      drawntreasure+= drawntreasure;
        -:  662:    else{
    #####:  663:      temphand[z]=cardDrawn;
    #####:  664:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:      z++;
        -:  666:    }
        -:  667:  }
    #####:  668:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  669:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:    z=z-1;
        -:  671:  }
    #####:  672:}
        -:  673:
        -:  674:// Play council room
function play_Council_room called 0 returned 0% blocks executed 0%
    #####:  675:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  676:  int i;
        -:  677:  //+4 Cards
    #####:  678:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  679:  {
    #####:  680:    drawCard(currentPlayer, state);
call    0 never executed
        -:  681:  }
        -:  682:			
        -:  683:  //+1 Buy
    #####:  684:  state->numBuys++;
        -:  685:			
        -:  686:  //Each other player draws a card
    #####:  687:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  688:  {
    #####:  689:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  690:    {
    #####:  691:      drawCard(i, state);
call    0 never executed
        -:  692:    }
        -:  693:  }
        -:  694:			
        -:  695:  //put played card in played card pile
    #####:  696:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
        -:  697:			
    #####:  698:}
        -:  699:
        -:  700:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  701:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  702:  int i;
        -:  703:  
        -:  704:  int temphand[MAX_HAND];
        -:  705:  //gain card with cost up to 5
        -:  706:  //Backup hand
    #####:  707:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  708:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  709:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  710:  }
        -:  711:  //Backup hand
        -:  712:
        -:  713:  //Update Coins for Buy
    #####:  714:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  715:  i = 0;//Condition to loop on
    #####:  716:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  717:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  718:      if (DEBUG)
        -:  719:        printf("None of that card left, sorry!\n");
        -:  720:
        -:  721:      if (DEBUG){
        -:  722:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  723:      }
        -:  724:    }
    #####:  725:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  726:      printf("That card is too expensive!\n");
call    0 never executed
        -:  727:
        -:  728:      if (DEBUG){
        -:  729:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  730:      }
        -:  731:    }
        -:  732:    else{
        -:  733:
        -:  734:      if (DEBUG){
        -:  735:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:      }
        -:  737:
    #####:  738:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  739:      i = 0;//No more buying cards
        -:  740:
        -:  741:      if (DEBUG){
        -:  742:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  743:      }
        -:  744:
        -:  745:    }
        -:  746:  }     
        -:  747:
        -:  748:  //Reset Hand
    #####:  749:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  750:    state->hand[currentPlayer][i] = temphand[i];
    #####:  751:    temphand[i] = -1;
        -:  752:  }
        -:  753:  //Reset Hand
        -:  754:  
    #####:  755:}
        -:  756:
        -:  757:// Play mine
function play_Mine called 0 returned 0% blocks executed 0%
    #####:  758:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  759:  int i,j;
    #####:  760:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  761:
    #####:  762:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:    {
    #####:  764:      return -1;
        -:  765:    }
        -:  766:		
    #####:  767:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  768:    {
    #####:  769:      return -1;
        -:  770:    }
        -:  771:
    #####:  772:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  773:    {
    #####:  774:      return -1;
        -:  775:    }
        -:  776:
    #####:  777:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  778:
        -:  779:    //discard card from hand
    #####:  780:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  781:
        -:  782:    //discard trashed card
    #####:  783:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  784:    {
    #####:  785:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  786:      {
    #####:  787:        discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  788:        break;
        -:  789:      }
        -:  790:    }
    #####:  791:  return 0;
        -:  792:}
        -:  793:
        -:  794:// Play smithy
function play_Smithy called 0 returned 0% blocks executed 0%
    #####:  795:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  796:  int i;
        -:  797:  //+3 Cards
    #####:  798:  for (i = 0; i <= 3; i++)
branch  0 never executed
branch  1 never executed
        -:  799:    {
    #####:  800:      drawCard(currentPlayer, state);
call    0 never executed
        -:  801:    }
        -:  802:			
        -:  803:  //discard card from hand
    #####:  804:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  805:}
        -:  806:    
        -:  807:    
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  808:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  809:{
        -:  810:  int i;
        -:  811:  int j;
        -:  812:  int k;
        -:  813:  int index;
    #####:  814:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  815:  int nextPlayer = currentPlayer + 1;
    #####:  816:  int tributeRevealedCards[2] = {-1, -1};
    #####:  817:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  818:    nextPlayer = 0;
        -:  819:  }
        -:  820:  
        -:  821:  //uses switch to select card and perform actions
    #####:  822:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  823:    {
        -:  824:    case adventurer:
    #####:  825:      play_Adventurer(state, currentPlayer);
call    0 never executed
    #####:  826:      return 0;
        -:  827:			
        -:  828:    case council_room:
    #####:  829:      play_Council_room(state, currentPlayer, handPos);
call    0 never executed
    #####:  830:      return 0;
        -:  831:			
        -:  832:    case feast:
    #####:  833:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  834:      return 0;
        -:  835:			
        -:  836:    case gardens:
    #####:  837:      return -1;
        -:  838:			
        -:  839:    case mine:
    #####:  840:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 never executed
    #####:  841:      return 0;
        -:  842:			
        -:  843:    case remodel:
    #####:  844:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  845:
    #####:  846:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:
    #####:  851:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  852:
        -:  853:      //discard card from hand
    #####:  854:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  855:
        -:  856:      //discard trashed card
    #####:  857:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  858:	{
    #####:  859:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  860:	    {
    #####:  861:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  862:	      break;
        -:  863:	    }
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case smithy:
    #####:  868:      play_Smithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  869:      return 0;
        -:  870:		
        -:  871:    case village:
        -:  872:      //+1 Card
    #####:  873:      drawCard(currentPlayer, state);
call    0 never executed
        -:  874:			
        -:  875:      //+2 Actions
    #####:  876:      state->numActions = state->numActions + 2;
        -:  877:			
        -:  878:      //discard played card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  880:      return 0;
        -:  881:		
        -:  882:    case baron:
    #####:  883:      state->numBuys++;//Increase buys by 1!
    #####:  884:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  885:	int p = 0;//Iterator for hand!
    #####:  886:	int card_not_discarded = 1;//Flag for discard set!
    #####:  887:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  888:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  889:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  890:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  891:	    state->discardCount[currentPlayer]++;
    #####:  892:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  893:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  894:	    }
    #####:  895:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  896:	    state->handCount[currentPlayer]--;
    #####:  897:	    card_not_discarded = 0;//Exit the loop
        -:  898:	  }
    #####:  899:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  900:	    if(DEBUG) {
        -:  901:	      printf("No estate cards in your hand, invalid choice\n");
        -:  902:	      printf("Must gain an estate if there are any\n");
        -:  903:	    }
    #####:  904:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  905:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  906:	      state->supplyCount[estate]--;//Decrement estates
    #####:  907:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  908:		isGameOver(state);
call    0 never executed
        -:  909:	      }
        -:  910:	    }
    #####:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
        -:  913:			    
        -:  914:	  else{
    #####:  915:	    p++;//Next card
        -:  916:	  }
        -:  917:	}
        -:  918:      }
        -:  919:			    
        -:  920:      else{
    #####:  921:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  923:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  924:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:	    isGameOver(state);
call    0 never executed
        -:  926:	  }
        -:  927:	}
        -:  928:      }
        -:  929:	    
        -:  930:      
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case great_hall:
        -:  934:      //+1 Card
    #####:  935:      drawCard(currentPlayer, state);
call    0 never executed
        -:  936:			
        -:  937:      //+1 Actions
    #####:  938:      state->numActions++;
        -:  939:			
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case minion:
        -:  945:      //+1 action
    #####:  946:      state->numActions++;
        -:  947:			
        -:  948:      //discard card from hand
    #####:  949:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  950:			
    #####:  951:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  state->coins = state->coins + 2;
        -:  954:	}
        -:  955:			
    #####:  956:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  957:	{
        -:  958:	  //discard hand
    #####:  959:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  960:	    {
    #####:  961:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  962:	    }
        -:  963:				
        -:  964:	  //draw 4
    #####:  965:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  966:	    {
    #####:  967:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  968:	    }
        -:  969:				
        -:  970:	  //other players discard hand and redraw if hand size > 4
    #####:  971:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  972:	    {
    #####:  973:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  974:		{
    #####:  975:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  976:		    {
        -:  977:		      //discard hand
    #####:  978:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  979:			{
    #####:  980:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  981:			}
        -:  982:							
        -:  983:		      //draw 4
    #####:  984:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  985:			{
    #####:  986:			  drawCard(i, state);
call    0 never executed
        -:  987:			}
        -:  988:		    }
        -:  989:		}
        -:  990:	    }
        -:  991:				
        -:  992:	}
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case steward:
    #####:  996:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  997:	{
        -:  998:	  //+2 cards
    #####:  999:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1001:	}
    #####: 1002:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //+2 coins
    #####: 1005:	  state->coins = state->coins + 2;
        -: 1006:	}
        -: 1007:      else
        -: 1008:	{
        -: 1009:	  //trash 2 cards in hand
    #####: 1010:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1011:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1012:	}
        -: 1013:			
        -: 1014:      //discard card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1067:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
        -: 1158:		}
        -: 1159:					
        -: 1160:	    }
        -: 1161:				
        -: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
    #####: 1259:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1260:    {
        -: 1261:      //add card to played pile
    #####: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
    #####: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
    #####: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
    #####: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
    #####: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
    #####: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
    #####: 1290:  return 0;
        -: 1291:}
        -: 1292:
function gainCard called 26 returned 100% blocks executed 100%
       26: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1298:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
        -: 1299:    {
        5: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
       21: 1308:  if (toFlag == 1)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -: 1309:    {
        5: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        5: 1311:      state->deckCount[player]++;
        -: 1312:    }
       16: 1313:  else if (toFlag == 2)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1314:    {
        5: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
       11: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       11: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
       21: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
       21: 1327:  return 0;
        -: 1328:}
        -: 1329:
function updateCoins called 783 returned 100% blocks executed 82%
      783: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
      783: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
     4698: 1338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1339:    {
     3915: 1340:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1341:	{
     3132: 1342:	  state->coins += 1;
        -: 1343:	}
      783: 1344:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
      783: 1348:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
      783: 1355:  state->coins += bonus;
        -: 1356:
      783: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:15
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4590 returned 100% blocks executed 83%
     4590:    8:int compare(const void* a, const void* b) {
     4590:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4590:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1224:   12:    return -1;
     3366:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 94 returned 100% blocks executed 92%
       94:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       94:   44:  SelectStream(1);
call    0 returned 100%
       94:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       94:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       94:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1034:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    10340:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     9400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       94:   73:  if (numPlayers == 2)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -:   74:    {
       35:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       59:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       59:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       94:   87:  if (numPlayers == 2)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -:   88:    {
       35:   89:      state->supplyCount[estate] = 8;
       35:   90:      state->supplyCount[duchy] = 8;
       35:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       59:   95:      state->supplyCount[estate] = 12;
       59:   96:      state->supplyCount[duchy] = 12;
       59:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       94:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       94:  102:  state->supplyCount[silver] = 40;
       94:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1974:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    15510:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    14570:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      940:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:  114:		{
      228:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      826:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      940:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    13630:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      400:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 24% (fallthrough)
        -:  139:    {
      306:  140:      state->deckCount[i] = 0;
     1224:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      918:  143:	  state->deck[i][j] = estate;
      918:  144:	  state->deckCount[i]++;
        -:  145:	}
     2448:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     2142:  148:	  state->deck[i][j] = copper;
     2142:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      400:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 24% (fallthrough)
        -:  155:    {
      306:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      400:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 24% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      306:  166:      state->handCount[i] = 0;
      306:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2632:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2538:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       94:  182:  state->outpostPlayed = 0;
       94:  183:  state->phase = 0;
       94:  184:  state->numActions = 1;
       94:  185:  state->numBuys = 1;
       94:  186:  state->playedCardCount = 0;
       94:  187:  state->whoseTurn = 0;
       94:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      564:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      470:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       94:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       94:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 306 returned 100% blocks executed 94%
      306:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      306:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      306:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      306:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3672:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     3060:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     3060:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3060:  217:    newDeckPos++;
    10651:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     7591:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     3060:  221:    state->deckCount[player]--;
        -:  222:  }
     3366:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     3060:  224:    state->deck[player][i] = newDeck[i];
     3060:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      306:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 12 returned 100% blocks executed 100%
       12:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2500 returned 100% blocks executed 100%
     2500:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     2500:  326:  int count = 0;
        -:  327:
     6250:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  329:    {
     3750:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
     8000:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  334:    {
     5500:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
     9750:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  339:    {
     7250:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  341:    }
        -:  342:
     2500:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 35 returned 100% blocks executed 100%
       35:  346:int whoseTurn(struct gameState *state) {
       35:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 96 returned 100% blocks executed 100%
       96:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       96:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       94:  401:  j = 0;
     2444:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2350:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      216:  406:	  j++;
        -:  407:	}
        -:  408:    }
       94:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       40:  411:      return 1;
        -:  412:    }
        -:  413:
       54:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 1500 returned 100% blocks executed 100%
     1500:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     1500:  420:  int score = 0;
        -:  421:  //score from hand
     4500:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  423:    {
     3000:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     4500:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  434:    {
     3000:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     4500:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
     3000:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:  452:    }
        -:  453:
     1500:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 565 returned 100% blocks executed 38%
      565:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      565:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      565:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      565:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      565:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      565:  576:    state->deckCount[player]--;
      565:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      565:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 18 returned 100% blocks executed 20%
       18:  583:int getCost(int cardNumber)
        -:  584:{
       18:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 44%
branch  5 taken 11%
branch  6 taken 11%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        8:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Play adventurer
function play_Adventurer called 15 returned 100% blocks executed 64%
       15:  648:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  649:  int cardDrawn;
       15:  650:  int drawntreasure=0;
       15:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  int temphand[MAX_HAND];
        -:  653:    
       60:  654:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       30:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:      shuffle(currentPlayer, state);
call    0 never executed
        -:  657:    }
       30:  658:    drawCard(currentPlayer, state);
call    0 returned 100%
       30:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       30:  660:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
       30:  661:      drawntreasure++;
        -:  662:      //drawntreasure+= drawntreasure;
        -:  663:    else{
    #####:  664:      temphand[z]=cardDrawn;
    #####:  665:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:      z++;
        -:  667:    }
        -:  668:  }
       30:  669:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  670:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:    z=z-1;
        -:  672:  }
       15:  673:}
        -:  674:
        -:  675:// Play council room
function play_Council_room called 7 returned 100% blocks executed 100%
        7:  676:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  677:  int i;
        -:  678:  //+4 Cards
       35:  679:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  680:  {
       28:  681:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  682:  }
        -:  683:			
        -:  684:  //+1 Buy
        7:  685:  state->numBuys++;
        -:  686:			
        -:  687:  //Each other player draws a card
       23:  688:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  689:  {
       16:  690:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  691:    {
        9:  692:      drawCard(i, state);
call    0 returned 100%
        -:  693:    }
        -:  694:  }
        -:  695:			
        -:  696:  //put played card in played card pile
        7:  697:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  698:			
        7:  699:}
        -:  700:
        -:  701:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  702:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  703:  int i;
        -:  704:  
        -:  705:  int temphand[MAX_HAND];
        -:  706:  //gain card with cost up to 5
        -:  707:  //Backup hand
    #####:  708:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  709:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:  }
        -:  712:  //Backup hand
        -:  713:
        -:  714:  //Update Coins for Buy
    #####:  715:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  716:  i = 0;//Condition to loop on
    #####:  717:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  718:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  719:      if (DEBUG)
        -:  720:        printf("None of that card left, sorry!\n");
        -:  721:
        -:  722:      if (DEBUG){
        -:  723:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:      }
        -:  725:    }
    #####:  726:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  727:      printf("That card is too expensive!\n");
call    0 never executed
        -:  728:
        -:  729:      if (DEBUG){
        -:  730:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:      }
        -:  732:    }
        -:  733:    else{
        -:  734:
        -:  735:      if (DEBUG){
        -:  736:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:      }
        -:  738:
    #####:  739:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  740:      i = 0;//No more buying cards
        -:  741:
        -:  742:      if (DEBUG){
        -:  743:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:      }
        -:  745:
        -:  746:    }
        -:  747:  }     
        -:  748:
        -:  749:  //Reset Hand
    #####:  750:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  751:    state->hand[currentPlayer][i] = temphand[i];
    #####:  752:    temphand[i] = -1;
        -:  753:  }
        -:  754:  //Reset Hand
        -:  755:  
    #####:  756:}
        -:  757:
        -:  758:// Play mine
function play_Mine called 6 returned 100% blocks executed 90%
        6:  759:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  760:  int i,j;
        6:  761:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  762:
        6:  763:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  764:    {
    #####:  765:      return -1;
        -:  766:    }
        -:  767:		
        6:  768:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  769:    {
    #####:  770:      return -1;
        -:  771:    }
        -:  772:
        6:  773:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  774:    {
        2:  775:      return -1;
        -:  776:    }
        -:  777:
        4:  778:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  779:
        -:  780:    //discard card from hand
        4:  781:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  782:
        -:  783:    //discard trashed card
        8:  784:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  785:    {
        8:  786:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  787:      {
        4:  788:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        4:  789:        break;
        -:  790:      }
        -:  791:    }
        4:  792:  return 0;
        -:  793:}
        -:  794:
        -:  795:// Play smithy
function play_Smithy called 7 returned 100% blocks executed 100%
        7:  796:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  797:  int i;
        -:  798:  //+3 Cards
       35:  799:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  800:    {
       28:  801:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  802:    }
        -:  803:			
        -:  804:  //discard card from hand
        7:  805:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7:  806:}
        -:  807:    
        -:  808:    
function cardEffect called 35 returned 100% blocks executed 6%
       35:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int index;
       35:  815:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       35:  816:  int nextPlayer = currentPlayer + 1;
       35:  817:  int tributeRevealedCards[2] = {-1, -1};
       35:  818:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  819:    nextPlayer = 0;
        -:  820:  }
        -:  821:  
        -:  822:  //uses switch to select card and perform actions
       35:  823:  switch( card ) 
branch  0 taken 43%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 17%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  824:    {
        -:  825:    case adventurer:
       15:  826:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
       15:  827:      return 0;
        -:  828:			
        -:  829:    case council_room:
        7:  830:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
        7:  831:      return 0;
        -:  832:			
        -:  833:    case feast:
    #####:  834:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  835:      return 0;
        -:  836:			
        -:  837:    case gardens:
    #####:  838:      return -1;
        -:  839:			
        -:  840:    case mine:
        6:  841:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        6:  842:      return 0;
        -:  843:			
        -:  844:    case remodel:
    #####:  845:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  859:	{
    #####:  860:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  861:	    {
    #####:  862:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  863:	      break;
        -:  864:	    }
        -:  865:	}
    #####:  866:      return 0;
        -:  867:		
        -:  868:    case smithy:
        7:  869:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
        7:  870:      return 0;
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
call    0 never executed
        -:  875:			
        -:  876:      //+2 Actions
    #####:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 22 returned 100% blocks executed 78%
       22: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       22: 1260:  if (trashFlag < 1)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 1261:    {
        -: 1262:      //add card to played pile
       15: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       22: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       22: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       22: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       22: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       22: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       22: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       22: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 9 returned 100% blocks executed 100%
        9: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
        9: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
        -: 1300:    {
        1: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
        8: 1309:  if (toFlag == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -: 1310:    {
        1: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1312:      state->deckCount[player]++;
        -: 1313:    }
        7: 1314:  else if (toFlag == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1315:    {
        5: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
        2: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
        8: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
        8: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 94 returned 100% blocks executed 82%
       94: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
       94: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      564: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
      470: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
      376: 1343:	  state->coins += 1;
        -: 1344:	}
       94: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
       94: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
       94: 1356:  state->coins += bonus;
        -: 1357:
       94: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:24
        -:    0:Programs:23
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 8730 returned 100% blocks executed 83%
     8730:    8:int compare(const void* a, const void* b) {
     8730:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     8730:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     2328:   12:    return -1;
     6402:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 173 returned 100% blocks executed 92%
      173:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      173:   44:  SelectStream(1);
call    0 returned 100%
      173:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      173:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      173:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1903:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    19030:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    17300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      173:   73:  if (numPlayers == 2)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:   74:    {
       55:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      118:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      118:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      173:   87:  if (numPlayers == 2)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:   88:    {
       55:   89:      state->supplyCount[estate] = 8;
       55:   90:      state->supplyCount[duchy] = 8;
       55:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      118:   95:      state->supplyCount[estate] = 12;
      118:   96:      state->supplyCount[duchy] = 12;
      118:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      173:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      173:  102:  state->supplyCount[silver] = 40;
      173:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3633:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    28545:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    26815:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1730:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:  114:		{
      456:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      228:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1502:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1730:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    25085:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      755:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  139:    {
      582:  140:      state->deckCount[i] = 0;
     2328:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     1746:  143:	  state->deck[i][j] = estate;
     1746:  144:	  state->deckCount[i]++;
        -:  145:	}
     4656:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     4074:  148:	  state->deck[i][j] = copper;
     4074:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      755:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  155:    {
      582:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      755:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      582:  166:      state->handCount[i] = 0;
      582:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4844:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     4671:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      173:  182:  state->outpostPlayed = 0;
      173:  183:  state->phase = 0;
      173:  184:  state->numActions = 1;
      173:  185:  state->numBuys = 1;
      173:  186:  state->playedCardCount = 0;
      173:  187:  state->whoseTurn = 0;
      173:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1038:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      865:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      173:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      173:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 582 returned 100% blocks executed 94%
      582:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      582:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      582:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      582:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6984:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5820:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     5820:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5820:  217:    newDeckPos++;
    20252:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    14432:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5820:  221:    state->deckCount[player]--;
        -:  222:  }
     6402:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5820:  224:    state->deck[player][i] = newDeck[i];
     5820:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      582:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 8 returned 100% blocks executed 100%
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        2:  285:    return -1;
        6:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        4:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        2:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 22 returned 100% blocks executed 100%
       22:  320:int supplyCount(int card, struct gameState *state) {
       22:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 5000 returned 100% blocks executed 100%
     5000:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     5000:  326:  int count = 0;
        -:  327:
    12500:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  329:    {
     7500:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
    16000:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  334:    {
    11000:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
    19500:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  339:    {
    14500:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  341:    }
        -:  342:
     5000:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 55 returned 100% blocks executed 100%
       55:  346:int whoseTurn(struct gameState *state) {
       55:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 192 returned 100% blocks executed 100%
      192:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      192:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        4:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      188:  401:  j = 0;
     4888:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     4700:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      432:  406:	  j++;
        -:  407:	}
        -:  408:    }
      188:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       80:  411:      return 1;
        -:  412:    }
        -:  413:
      108:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 3000 returned 100% blocks executed 100%
     3000:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     3000:  420:  int score = 0;
        -:  421:  //score from hand
     9000:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  423:    {
     6000:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     9000:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  434:    {
     6000:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     6000:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     9000:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
     6000:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     6000:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:  452:    }
        -:  453:
     3000:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1031 returned 100% blocks executed 38%
     1031:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1031:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1031:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1031:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1031:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1031:  576:    state->deckCount[player]--;
     1031:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1031:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 30 returned 100% blocks executed 20%
       30:  583:int getCost(int cardNumber)
        -:  584:{
       30:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 40%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 40%
branch  5 taken 10%
branch  6 taken 10%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       12:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
       12:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Play adventurer
function play_Adventurer called 18 returned 100% blocks executed 64%
       18:  648:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  649:  int cardDrawn;
       18:  650:  int drawntreasure=0;
       18:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  int temphand[MAX_HAND];
        -:  653:    
       72:  654:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       36:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:      shuffle(currentPlayer, state);
call    0 never executed
        -:  657:    }
       36:  658:    drawCard(currentPlayer, state);
call    0 returned 100%
       36:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       36:  660:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
       36:  661:      drawntreasure++;
        -:  662:      //drawntreasure+= drawntreasure;
        -:  663:    else{
    #####:  664:      temphand[z]=cardDrawn;
    #####:  665:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:      z++;
        -:  667:    }
        -:  668:  }
       36:  669:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  670:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:    z=z-1;
        -:  672:  }
       18:  673:}
        -:  674:
        -:  675:// Play council room
function play_Council_room called 14 returned 100% blocks executed 100%
       14:  676:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  677:  int i;
        -:  678:  //+4 Cards
       70:  679:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  680:  {
       56:  681:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  682:  }
        -:  683:			
        -:  684:  //+1 Buy
       14:  685:  state->numBuys++;
        -:  686:			
        -:  687:  //Each other player draws a card
       46:  688:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  689:  {
       32:  690:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  691:    {
       18:  692:      drawCard(i, state);
call    0 returned 100%
        -:  693:    }
        -:  694:  }
        -:  695:			
        -:  696:  //put played card in played card pile
       14:  697:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  698:			
       14:  699:}
        -:  700:
        -:  701:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  702:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  703:  int i;
        -:  704:  
        -:  705:  int temphand[MAX_HAND];
        -:  706:  //gain card with cost up to 5
        -:  707:  //Backup hand
    #####:  708:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  709:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:  }
        -:  712:  //Backup hand
        -:  713:
        -:  714:  //Update Coins for Buy
    #####:  715:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  716:  i = 0;//Condition to loop on
    #####:  717:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  718:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  719:      if (DEBUG)
        -:  720:        printf("None of that card left, sorry!\n");
        -:  721:
        -:  722:      if (DEBUG){
        -:  723:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:      }
        -:  725:    }
    #####:  726:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  727:      printf("That card is too expensive!\n");
call    0 never executed
        -:  728:
        -:  729:      if (DEBUG){
        -:  730:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:      }
        -:  732:    }
        -:  733:    else{
        -:  734:
        -:  735:      if (DEBUG){
        -:  736:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:      }
        -:  738:
    #####:  739:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  740:      i = 0;//No more buying cards
        -:  741:
        -:  742:      if (DEBUG){
        -:  743:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:      }
        -:  745:
        -:  746:    }
        -:  747:  }     
        -:  748:
        -:  749:  //Reset Hand
    #####:  750:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  751:    state->hand[currentPlayer][i] = temphand[i];
    #####:  752:    temphand[i] = -1;
        -:  753:  }
        -:  754:  //Reset Hand
        -:  755:  
    #####:  756:}
        -:  757:
        -:  758:// Play mine
function play_Mine called 9 returned 100% blocks executed 90%
        9:  759:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  760:  int i,j;
        9:  761:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  762:
        9:  763:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  764:    {
    #####:  765:      return -1;
        -:  766:    }
        -:  767:		
        9:  768:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  769:    {
    #####:  770:      return -1;
        -:  771:    }
        -:  772:
        9:  773:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  774:    {
        3:  775:      return -1;
        -:  776:    }
        -:  777:
        6:  778:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  779:
        -:  780:    //discard card from hand
        6:  781:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  782:
        -:  783:    //discard trashed card
       12:  784:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  785:    {
       12:  786:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  787:      {
        6:  788:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        6:  789:        break;
        -:  790:      }
        -:  791:    }
        6:  792:  return 0;
        -:  793:}
        -:  794:
        -:  795:// Play smithy
function play_Smithy called 14 returned 100% blocks executed 100%
       14:  796:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  797:  int i;
        -:  798:  //+3 Cards
       70:  799:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  800:    {
       56:  801:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  802:    }
        -:  803:			
        -:  804:  //discard card from hand
       14:  805:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       14:  806:}
        -:  807:    
        -:  808:    
function cardEffect called 55 returned 100% blocks executed 6%
       55:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int index;
       55:  815:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       55:  816:  int nextPlayer = currentPlayer + 1;
       55:  817:  int tributeRevealedCards[2] = {-1, -1};
       55:  818:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  819:    nextPlayer = 0;
        -:  820:  }
        -:  821:  
        -:  822:  //uses switch to select card and perform actions
       55:  823:  switch( card ) 
branch  0 taken 33%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 16%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  824:    {
        -:  825:    case adventurer:
       18:  826:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
       18:  827:      return 0;
        -:  828:			
        -:  829:    case council_room:
       14:  830:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
       14:  831:      return 0;
        -:  832:			
        -:  833:    case feast:
    #####:  834:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  835:      return 0;
        -:  836:			
        -:  837:    case gardens:
    #####:  838:      return -1;
        -:  839:			
        -:  840:    case mine:
        9:  841:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        9:  842:      return 0;
        -:  843:			
        -:  844:    case remodel:
    #####:  845:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  859:	{
    #####:  860:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  861:	    {
    #####:  862:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  863:	      break;
        -:  864:	    }
        -:  865:	}
    #####:  866:      return 0;
        -:  867:		
        -:  868:    case smithy:
       14:  869:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
       14:  870:      return 0;
        -:  871:		
        -:  872:    case village:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
call    0 never executed
        -:  875:			
        -:  876:      //+2 Actions
    #####:  877:      state->numActions = state->numActions + 2;
        -:  878:			
        -:  879:      //discard played card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case baron:
    #####:  884:      state->numBuys++;//Increase buys by 1!
    #####:  885:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  886:	int p = 0;//Iterator for hand!
    #####:  887:	int card_not_discarded = 1;//Flag for discard set!
    #####:  888:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  889:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  890:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:	    state->discardCount[currentPlayer]++;
    #####:  893:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  894:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:	    }
    #####:  896:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:	    state->handCount[currentPlayer]--;
    #####:  898:	    card_not_discarded = 0;//Exit the loop
        -:  899:	  }
    #####:  900:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  901:	    if(DEBUG) {
        -:  902:	      printf("No estate cards in your hand, invalid choice\n");
        -:  903:	      printf("Must gain an estate if there are any\n");
        -:  904:	    }
    #####:  905:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  907:	      state->supplyCount[estate]--;//Decrement estates
    #####:  908:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:		isGameOver(state);
call    0 never executed
        -:  910:	      }
        -:  911:	    }
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:			    
        -:  915:	  else{
    #####:  916:	    p++;//Next card
        -:  917:	  }
        -:  918:	}
        -:  919:      }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  924:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  925:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	    isGameOver(state);
call    0 never executed
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:	    
        -:  931:      
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case great_hall:
        -:  935:      //+1 Card
    #####:  936:      drawCard(currentPlayer, state);
call    0 never executed
        -:  937:			
        -:  938:      //+1 Actions
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case minion:
        -:  946:      //+1 action
    #####:  947:      state->numActions++;
        -:  948:			
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:			
    #####:  952:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  state->coins = state->coins + 2;
        -:  955:	}
        -:  956:			
    #####:  957:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  958:	{
        -:  959:	  //discard hand
    #####:  960:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:	    {
    #####:  962:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //draw 4
    #####:  966:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:	    }
        -:  970:				
        -:  971:	  //other players discard hand and redraw if hand size > 4
    #####:  972:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  977:		    {
        -:  978:		      //discard hand
    #####:  979:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  982:			}
        -:  983:							
        -:  984:		      //draw 4
    #####:  985:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  986:			{
    #####:  987:			  drawCard(i, state);
call    0 never executed
        -:  988:			}
        -:  989:		    }
        -:  990:		}
        -:  991:	    }
        -:  992:				
        -:  993:	}
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case steward:
    #####:  997:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 cards
    #####: 1000:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	}
    #####: 1003:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
        -: 1005:	  //+2 coins
    #####: 1006:	  state->coins = state->coins + 2;
        -: 1007:	}
        -: 1008:      else
        -: 1009:	{
        -: 1010:	  //trash 2 cards in hand
    #####: 1011:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1012:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card from hand
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case tribute:
    #####: 1020:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:	  state->deckCount[nextPlayer]--;
        -: 1024:	}
    #####: 1025:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:	  state->discardCount[nextPlayer]--;
        -: 1028:	}
        -: 1029:	else{
        -: 1030:	  //No Card to Reveal
        -: 1031:	  if (DEBUG){
        -: 1032:	    printf("No cards to reveal\n");
        -: 1033:	  }
        -: 1034:	}
        -: 1035:      }
        -: 1036:	    
        -: 1037:      else{
    #####: 1038:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:	    state->deckCount[nextPlayer]++;
    #####: 1042:	    state->discard[nextPlayer][i] = -1;
    #####: 1043:	    state->discardCount[nextPlayer]--;
        -: 1044:	  }
        -: 1045:			    
    #####: 1046:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1047:	} 
    #####: 1048:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
    #####: 1051:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
        -: 1054:      }    
        -: 1055:		       
    #####: 1056:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1057:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:	state->playedCardCount++;
    #####: 1059:	tributeRevealedCards[1] = -1;
        -: 1060:      }
        -: 1061:
    #####: 1062:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1064:	  state->coins += 2;
        -: 1065:	}
        -: 1066:		    
    #####: 1067:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	}
        -: 1071:	else{//Action Card
    #####: 1072:	  state->numActions = state->numActions + 2;
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case ambassador:
    #####: 1079:      j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
    #####: 1086:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1094:	    {
    #####: 1095:	      j++;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
        -: 1103:      if (DEBUG) 
        -: 1104:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:      //increase supply count for choosen card by amount being discarded
    #####: 1107:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:			
        -: 1109:      //each other player gains a copy of revealed card
    #####: 1110:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1115:	    }
        -: 1116:	}
        -: 1117:
        -: 1118:      //discard played card from hand
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1120:
        -: 1121:      //trash copies of cards returned to supply
    #####: 1122:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1127:		{
    #####: 1128:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:		  break;
        -: 1130:		}
        -: 1131:	    }
        -: 1132:	}			
        -: 1133:
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case cutpurse:
        -: 1137:
    #####: 1138:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1139:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1142:	    {
    #####: 1143:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1144:		{
    #####: 1145:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1146:		    {
    #####: 1147:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1148:		      break;
        -: 1149:		    }
    #####: 1150:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1153:			{
        -: 1154:			  if (DEBUG)
        -: 1155:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:			}	
    #####: 1157:		      break;
        -: 1158:		    }		
        -: 1159:		}
        -: 1160:					
        -: 1161:	    }
        -: 1162:				
        -: 1163:	}				
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:
        -: 1170:		
        -: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 40 returned 100% blocks executed 78%
       40: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       40: 1260:  if (trashFlag < 1)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1261:    {
        -: 1262:      //add card to played pile
       26: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       26: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       40: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       40: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       40: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       40: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       40: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       40: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       40: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 16 returned 100% blocks executed 100%
       16: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
       16: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
        -: 1300:    {
        2: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
       14: 1309:  if (toFlag == 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1310:    {
        2: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1312:      state->deckCount[player]++;
        -: 1313:    }
       12: 1314:  else if (toFlag == 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1315:    {
        8: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        8: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
        4: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
       14: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
       14: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 173 returned 100% blocks executed 82%
      173: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
      173: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     1038: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1340:    {
      865: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1342:	{
      692: 1343:	  state->coins += 1;
        -: 1344:	}
      173: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
      173: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
      173: 1356:  state->coins += bonus;
        -: 1357:
      173: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4140 returned 100% blocks executed 83%
     4140:    8:int compare(const void* a, const void* b) {
     4140:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4140:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1104:   12:    return -1;
     3036:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 79 returned 100% blocks executed 92%
       79:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       79:   44:  SelectStream(1);
call    0 returned 100%
       79:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       79:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       79:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      869:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     8690:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     7900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       79:   73:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       59:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       59:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       79:   87:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       59:   95:      state->supplyCount[estate] = 12;
       59:   96:      state->supplyCount[duchy] = 12;
       59:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       79:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       79:  102:  state->supplyCount[silver] = 40;
       79:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1659:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    13035:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    12245:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      790:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
      228:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      676:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      790:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11455:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      355:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  139:    {
      276:  140:      state->deckCount[i] = 0;
     1104:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      828:  143:	  state->deck[i][j] = estate;
      828:  144:	  state->deckCount[i]++;
        -:  145:	}
     2208:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1932:  148:	  state->deck[i][j] = copper;
     1932:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      355:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  155:    {
      276:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      355:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      276:  166:      state->handCount[i] = 0;
      276:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2212:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2133:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       79:  182:  state->outpostPlayed = 0;
       79:  183:  state->phase = 0;
       79:  184:  state->numActions = 1;
       79:  185:  state->numBuys = 1;
       79:  186:  state->playedCardCount = 0;
       79:  187:  state->whoseTurn = 0;
       79:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      474:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      395:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       79:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       79:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 276 returned 100% blocks executed 94%
      276:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      276:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      276:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      276:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3312:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2760:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2760:  217:    newDeckPos++;
     9601:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     6841:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2760:  221:    state->deckCount[player]--;
        -:  222:  }
     3036:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  224:    state->deck[player][i] = newDeck[i];
     2760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      276:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  320:int supplyCount(int card, struct gameState *state) {
       10:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2500 returned 100% blocks executed 100%
     2500:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     2500:  326:  int count = 0;
        -:  327:
     6250:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  329:    {
     3750:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
     8000:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  334:    {
     5500:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
     9750:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  339:    {
     7250:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  341:    }
        -:  342:
     2500:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 96 returned 100% blocks executed 100%
       96:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       96:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       94:  401:  j = 0;
     2444:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2350:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      216:  406:	  j++;
        -:  407:	}
        -:  408:    }
       94:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       40:  411:      return 1;
        -:  412:    }
        -:  413:
       54:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 1500 returned 100% blocks executed 100%
     1500:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     1500:  420:  int score = 0;
        -:  421:  //score from hand
     4500:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  423:    {
     3000:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     4500:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  434:    {
     3000:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     4500:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
     3000:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:  452:    }
        -:  453:
     1500:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 466 returned 100% blocks executed 38%
      466:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      466:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      466:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      466:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      466:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      466:  576:    state->deckCount[player]--;
      466:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      466:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 12 returned 100% blocks executed 20%
       12:  583:int getCost(int cardNumber)
        -:  584:{
       12:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 8%
branch  6 taken 8%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Play adventurer
function play_Adventurer called 3 returned 100% blocks executed 64%
        3:  648:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  649:  int cardDrawn;
        3:  650:  int drawntreasure=0;
        3:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  int temphand[MAX_HAND];
        -:  653:
        -:  654:  //while(drawntreasure<2 && state->deckCount[currentPlayer] + state->discardCount[currentPlayer] > 0){
       12:  655:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  656:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  657:      shuffle(currentPlayer, state);
call    0 never executed
        -:  658:    }
        6:  659:    drawCard(currentPlayer, state);
call    0 returned 100%
        6:  660:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        6:  662:      drawntreasure++;
        -:  663:      //drawntreasure+= drawntreasure;
        -:  664:    else{
    #####:  665:      temphand[z]=cardDrawn;
    #####:  666:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  667:      z++;
        -:  668:    }
        -:  669:  }
        6:  670:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  671:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  672:    z=z-1;
        -:  673:  }
        3:  674:}
        -:  675:
        -:  676:// Play council room
function play_Council_room called 7 returned 100% blocks executed 100%
        7:  677:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  678:  int i;
        -:  679:  //+4 Cards
       35:  680:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  681:  {
       28:  682:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:  }
        -:  684:			
        -:  685:  //+1 Buy
        7:  686:  state->numBuys++;
        -:  687:			
        -:  688:  //Each other player draws a card
       23:  689:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  690:  {
       16:  691:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  692:    {
        9:  693:      drawCard(i, state);
call    0 returned 100%
        -:  694:    }
        -:  695:  }
        -:  696:			
        -:  697:  //put played card in played card pile
        7:  698:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  699:			
        7:  700:}
        -:  701:
        -:  702:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  703:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  704:  int i;
        -:  705:  
        -:  706:  int temphand[MAX_HAND];
        -:  707:  //gain card with cost up to 5
        -:  708:  //Backup hand
    #####:  709:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:  }
        -:  713:  //Backup hand
        -:  714:
        -:  715:  //Update Coins for Buy
    #####:  716:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  717:  i = 0;//Condition to loop on
    #####:  718:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  720:      if (DEBUG)
        -:  721:        printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:      if (DEBUG){
        -:  724:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:      }
        -:  726:    }
    #####:  727:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:      printf("That card is too expensive!\n");
call    0 never executed
        -:  729:
        -:  730:      if (DEBUG){
        -:  731:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:      }
        -:  733:    }
        -:  734:    else{
        -:  735:
        -:  736:      if (DEBUG){
        -:  737:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:      }
        -:  739:
    #####:  740:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  741:      i = 0;//No more buying cards
        -:  742:
        -:  743:      if (DEBUG){
        -:  744:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:      }
        -:  746:
        -:  747:    }
        -:  748:  }     
        -:  749:
        -:  750:  //Reset Hand
    #####:  751:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:    state->hand[currentPlayer][i] = temphand[i];
    #####:  753:    temphand[i] = -1;
        -:  754:  }
        -:  755:  //Reset Hand
        -:  756:  
    #####:  757:}
        -:  758:
        -:  759:// Play mine
function play_Mine called 3 returned 100% blocks executed 90%
        3:  760:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  761:  int i,j;
        3:  762:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
        3:  764:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  765:    {
    #####:  766:      return -1;
        -:  767:    }
        -:  768:		
        3:  769:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  770:    {
    #####:  771:      return -1;
        -:  772:    }
        -:  773:
        3:  774:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  775:    {
        1:  776:      return -1;
        -:  777:    }
        -:  778:
        2:  779:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  780:
        -:  781:    //discard card from hand
        2:  782:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  783:
        -:  784:    //discard trashed card
        4:  785:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  786:    {
        4:  787:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  788:      {
        2:  789:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2:  790:        break;
        -:  791:      }
        -:  792:    }
        2:  793:  return 0;
        -:  794:}
        -:  795:
        -:  796:// Play smithy
function play_Smithy called 7 returned 100% blocks executed 100%
        7:  797:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  798:  int i;
        -:  799:  //+3 Cards
       35:  800:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  801:    {
       28:  802:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  803:    }
        -:  804:			
        -:  805:  //discard card from hand
        7:  806:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7:  807:}
        -:  808:    
        -:  809:    
function cardEffect called 20 returned 100% blocks executed 6%
       20:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int index;
       20:  816:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  817:  int nextPlayer = currentPlayer + 1;
       20:  818:  int tributeRevealedCards[2] = {-1, -1};
       20:  819:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  820:    nextPlayer = 0;
        -:  821:  }
        -:  822:  
        -:  823:  //uses switch to select card and perform actions
       20:  824:  switch( card ) 
branch  0 taken 15%
branch  1 taken 35%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 15%
branch  5 taken 0%
branch  6 taken 35%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  825:    {
        -:  826:    case adventurer:
        3:  827:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
        3:  828:      return 0;
        -:  829:			
        -:  830:    case council_room:
        7:  831:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
        7:  832:      return 0;
        -:  833:			
        -:  834:    case feast:
    #####:  835:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
        3:  842:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        3:  843:      return 0;
        -:  844:			
        -:  845:    case remodel:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  864:	      break;
        -:  865:	    }
        -:  866:	}
    #####:  867:      return 0;
        -:  868:		
        -:  869:    case smithy:
        7:  870:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
        7:  871:      return 0;
        -:  872:		
        -:  873:    case village:
        -:  874:      //+1 Card
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:			
        -:  877:      //+2 Actions
    #####:  878:      state->numActions = state->numActions + 2;
        -:  879:			
        -:  880:      //discard played card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  890:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:	    state->discardCount[currentPlayer]++;
    #####:  894:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  895:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  896:	    }
    #####:  897:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:	    state->handCount[currentPlayer]--;
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
    #####:  901:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  902:	    if(DEBUG) {
        -:  903:	      printf("No estate cards in your hand, invalid choice\n");
        -:  904:	      printf("Must gain an estate if there are any\n");
        -:  905:	    }
    #####:  906:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  908:	      state->supplyCount[estate]--;//Decrement estates
    #####:  909:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:		isGameOver(state);
call    0 never executed
        -:  911:	      }
        -:  912:	    }
    #####:  913:	    card_not_discarded = 0;//Exit the loop
        -:  914:	  }
        -:  915:			    
        -:  916:	  else{
    #####:  917:	    p++;//Next card
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:			    
        -:  922:      else{
    #####:  923:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  925:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  926:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	    isGameOver(state);
call    0 never executed
        -:  928:	  }
        -:  929:	}
        -:  930:      }
        -:  931:	    
        -:  932:      
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
call    0 never executed
        -:  938:			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  987:			{
    #####:  988:			  drawCard(i, state);
call    0 never executed
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1002:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1215:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
function discardCard called 18 returned 100% blocks executed 78%
       18: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
       18: 1261:  if (trashFlag < 1)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1262:    {
        -: 1263:      //add card to played pile
       11: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
       18: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
       18: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
    #####: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
       18: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
    #####: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
       18: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
       18: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
       18: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
       18: 1292:  return 0;
        -: 1293:}
        -: 1294:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1300:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -: 1301:    {
        1: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
        6: 1310:  if (toFlag == 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1311:    {
        1: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1313:      state->deckCount[player]++;
        -: 1314:    }
        5: 1315:  else if (toFlag == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1316:    {
        3: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
        2: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
        6: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
        6: 1329:  return 0;
        -: 1330:}
        -: 1331:
function updateCoins called 79 returned 100% blocks executed 82%
       79: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
       79: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
      474: 1340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1341:    {
      395: 1342:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1343:	{
      316: 1344:	  state->coins += 1;
        -: 1345:	}
       79: 1346:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 2;
        -: 1349:	}
       79: 1350:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:	{
    #####: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
       79: 1357:  state->coins += bonus;
        -: 1358:
       79: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4140 returned 100% blocks executed 83%
     4140:    8:int compare(const void* a, const void* b) {
     4140:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4140:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1104:   12:    return -1;
     3036:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 79 returned 100% blocks executed 92%
       79:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       79:   44:  SelectStream(1);
call    0 returned 100%
       79:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       79:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       79:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      869:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     8690:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     7900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       79:   73:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       59:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       59:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       79:   87:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       59:   95:      state->supplyCount[estate] = 12;
       59:   96:      state->supplyCount[duchy] = 12;
       59:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       79:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       79:  102:  state->supplyCount[silver] = 40;
       79:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1659:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    13035:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    12245:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      790:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
      228:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      676:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      790:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11455:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      355:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  139:    {
      276:  140:      state->deckCount[i] = 0;
     1104:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      828:  143:	  state->deck[i][j] = estate;
      828:  144:	  state->deckCount[i]++;
        -:  145:	}
     2208:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1932:  148:	  state->deck[i][j] = copper;
     1932:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      355:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  155:    {
      276:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      355:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      276:  166:      state->handCount[i] = 0;
      276:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2212:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2133:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       79:  182:  state->outpostPlayed = 0;
       79:  183:  state->phase = 0;
       79:  184:  state->numActions = 1;
       79:  185:  state->numBuys = 1;
       79:  186:  state->playedCardCount = 0;
       79:  187:  state->whoseTurn = 0;
       79:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      474:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      395:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       79:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       79:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 276 returned 100% blocks executed 94%
      276:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      276:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      276:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      276:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3312:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2760:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2760:  217:    newDeckPos++;
     9601:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     6841:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2760:  221:    state->deckCount[player]--;
        -:  222:  }
     3036:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  224:    state->deck[player][i] = newDeck[i];
     2760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      276:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  320:int supplyCount(int card, struct gameState *state) {
       10:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2500 returned 100% blocks executed 100%
     2500:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     2500:  326:  int count = 0;
        -:  327:
     6250:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  329:    {
     3750:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
     8000:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  334:    {
     5500:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
     9750:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  339:    {
     7250:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  341:    }
        -:  342:
     2500:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 96 returned 100% blocks executed 100%
       96:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       96:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       94:  401:  j = 0;
     2444:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2350:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      216:  406:	  j++;
        -:  407:	}
        -:  408:    }
       94:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       40:  411:      return 1;
        -:  412:    }
        -:  413:
       54:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 1500 returned 100% blocks executed 100%
     1500:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     1500:  420:  int score = 0;
        -:  421:  //score from hand
     4500:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  423:    {
     3000:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     4500:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  434:    {
     3000:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     4500:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
     3000:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     3000:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
        -:  452:    }
        -:  453:
     1500:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 475 returned 100% blocks executed 38%
      475:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      475:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      475:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      475:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      475:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      475:  576:    state->deckCount[player]--;
      475:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      475:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 12 returned 100% blocks executed 20%
       12:  583:int getCost(int cardNumber)
        -:  584:{
       12:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 8%
branch  6 taken 8%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Play adventurer
function play_Adventurer called 3 returned 100% blocks executed 93%
        3:  648:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  649:  int cardDrawn;
        3:  650:  int drawntreasure=0;
        3:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  int temphand[MAX_HAND];
        -:  653:
       21:  654:  while(drawntreasure<2 && state->deckCount[currentPlayer] + state->discardCount[currentPlayer] > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        -:  655:  //while(drawntreasure<2){
       15:  656:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  657:      shuffle(currentPlayer, state);
call    0 never executed
        -:  658:    }
       15:  659:    drawCard(currentPlayer, state);
call    0 returned 100%
       15:  660:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  662:      //drawntreasure++;
        9:  663:      drawntreasure+= drawntreasure;
        -:  664:    else{
        6:  665:      temphand[z]=cardDrawn;
        6:  666:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  667:      z++;
        -:  668:    }
        -:  669:  }
       12:  670:  while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  671:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  672:    z=z-1;
        -:  673:  }
        3:  674:}
        -:  675:
        -:  676:// Play council room
function play_Council_room called 7 returned 100% blocks executed 100%
        7:  677:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  678:  int i;
        -:  679:  //+4 Cards
       35:  680:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  681:  {
       28:  682:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:  }
        -:  684:			
        -:  685:  //+1 Buy
        7:  686:  state->numBuys++;
        -:  687:			
        -:  688:  //Each other player draws a card
       23:  689:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  690:  {
       16:  691:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  692:    {
        9:  693:      drawCard(i, state);
call    0 returned 100%
        -:  694:    }
        -:  695:  }
        -:  696:			
        -:  697:  //put played card in played card pile
        7:  698:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  699:			
        7:  700:}
        -:  701:
        -:  702:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  703:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  704:  int i;
        -:  705:  
        -:  706:  int temphand[MAX_HAND];
        -:  707:  //gain card with cost up to 5
        -:  708:  //Backup hand
    #####:  709:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:  }
        -:  713:  //Backup hand
        -:  714:
        -:  715:  //Update Coins for Buy
    #####:  716:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  717:  i = 0;//Condition to loop on
    #####:  718:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  720:      if (DEBUG)
        -:  721:        printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:      if (DEBUG){
        -:  724:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:      }
        -:  726:    }
    #####:  727:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:      printf("That card is too expensive!\n");
call    0 never executed
        -:  729:
        -:  730:      if (DEBUG){
        -:  731:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:      }
        -:  733:    }
        -:  734:    else{
        -:  735:
        -:  736:      if (DEBUG){
        -:  737:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:      }
        -:  739:
    #####:  740:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  741:      i = 0;//No more buying cards
        -:  742:
        -:  743:      if (DEBUG){
        -:  744:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:      }
        -:  746:
        -:  747:    }
        -:  748:  }     
        -:  749:
        -:  750:  //Reset Hand
    #####:  751:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:    state->hand[currentPlayer][i] = temphand[i];
    #####:  753:    temphand[i] = -1;
        -:  754:  }
        -:  755:  //Reset Hand
        -:  756:  
    #####:  757:}
        -:  758:
        -:  759:// Play mine
function play_Mine called 3 returned 100% blocks executed 90%
        3:  760:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  761:  int i,j;
        3:  762:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
        3:  764:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  765:    {
    #####:  766:      return -1;
        -:  767:    }
        -:  768:		
        3:  769:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  770:    {
    #####:  771:      return -1;
        -:  772:    }
        -:  773:
        3:  774:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  775:    {
        1:  776:      return -1;
        -:  777:    }
        -:  778:
        2:  779:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  780:
        -:  781:    //discard card from hand
        2:  782:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  783:
        -:  784:    //discard trashed card
        4:  785:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  786:    {
        4:  787:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  788:      {
        2:  789:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2:  790:        break;
        -:  791:      }
        -:  792:    }
        2:  793:  return 0;
        -:  794:}
        -:  795:
        -:  796:// Play smithy
function play_Smithy called 7 returned 100% blocks executed 100%
        7:  797:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  798:  int i;
        -:  799:  //+3 Cards
       35:  800:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  801:    {
       28:  802:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  803:    }
        -:  804:			
        -:  805:  //discard card from hand
        7:  806:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7:  807:}
        -:  808:    
        -:  809:    
function cardEffect called 20 returned 100% blocks executed 6%
       20:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int index;
       20:  816:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  817:  int nextPlayer = currentPlayer + 1;
       20:  818:  int tributeRevealedCards[2] = {-1, -1};
       20:  819:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  820:    nextPlayer = 0;
        -:  821:  }
        -:  822:  
        -:  823:  //uses switch to select card and perform actions
       20:  824:  switch( card ) 
branch  0 taken 15%
branch  1 taken 35%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 15%
branch  5 taken 0%
branch  6 taken 35%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  825:    {
        -:  826:    case adventurer:
        3:  827:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
        3:  828:      return 0;
        -:  829:			
        -:  830:    case council_room:
        7:  831:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
        7:  832:      return 0;
        -:  833:			
        -:  834:    case feast:
    #####:  835:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
        3:  842:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        3:  843:      return 0;
        -:  844:			
        -:  845:    case remodel:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  864:	      break;
        -:  865:	    }
        -:  866:	}
    #####:  867:      return 0;
        -:  868:		
        -:  869:    case smithy:
        7:  870:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
        7:  871:      return 0;
        -:  872:		
        -:  873:    case village:
        -:  874:      //+1 Card
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:			
        -:  877:      //+2 Actions
    #####:  878:      state->numActions = state->numActions + 2;
        -:  879:			
        -:  880:      //discard played card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  890:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:	    state->discardCount[currentPlayer]++;
    #####:  894:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  895:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  896:	    }
    #####:  897:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:	    state->handCount[currentPlayer]--;
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
    #####:  901:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  902:	    if(DEBUG) {
        -:  903:	      printf("No estate cards in your hand, invalid choice\n");
        -:  904:	      printf("Must gain an estate if there are any\n");
        -:  905:	    }
    #####:  906:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  908:	      state->supplyCount[estate]--;//Decrement estates
    #####:  909:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:		isGameOver(state);
call    0 never executed
        -:  911:	      }
        -:  912:	    }
    #####:  913:	    card_not_discarded = 0;//Exit the loop
        -:  914:	  }
        -:  915:			    
        -:  916:	  else{
    #####:  917:	    p++;//Next card
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:			    
        -:  922:      else{
    #####:  923:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  925:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  926:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	    isGameOver(state);
call    0 never executed
        -:  928:	  }
        -:  929:	}
        -:  930:      }
        -:  931:	    
        -:  932:      
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
call    0 never executed
        -:  938:			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  987:			{
    #####:  988:			  drawCard(i, state);
call    0 never executed
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1002:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1215:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
function discardCard called 18 returned 100% blocks executed 78%
       18: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
       18: 1261:  if (trashFlag < 1)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1262:    {
        -: 1263:      //add card to played pile
       11: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
       18: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
       18: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
    #####: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
       18: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
    #####: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
       18: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
       18: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
       18: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
       18: 1292:  return 0;
        -: 1293:}
        -: 1294:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1300:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -: 1301:    {
        1: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
        6: 1310:  if (toFlag == 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1311:    {
        1: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1313:      state->deckCount[player]++;
        -: 1314:    }
        5: 1315:  else if (toFlag == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1316:    {
        3: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
        2: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
        6: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
        6: 1329:  return 0;
        -: 1330:}
        -: 1331:
function updateCoins called 79 returned 100% blocks executed 82%
       79: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
       79: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
      474: 1340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1341:    {
      395: 1342:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1343:	{
      316: 1344:	  state->coins += 1;
        -: 1345:	}
       79: 1346:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 2;
        -: 1349:	}
       79: 1350:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:	{
    #####: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
       79: 1357:  state->coins += bonus;
        -: 1358:
       79: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4140 returned 100% blocks executed 83%
     4140:    8:int compare(const void* a, const void* b) {
     4140:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4140:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1104:   12:    return -1;
     3036:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 79 returned 100% blocks executed 92%
       79:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       79:   44:  SelectStream(1);
call    0 returned 100%
       79:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       79:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       79:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      869:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     8690:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     7900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       79:   73:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       59:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       59:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       79:   87:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       59:   95:      state->supplyCount[estate] = 12;
       59:   96:      state->supplyCount[duchy] = 12;
       59:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       79:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       79:  102:  state->supplyCount[silver] = 40;
       79:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1659:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    13035:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    12245:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      790:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
      228:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      676:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      790:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11455:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      355:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  139:    {
      276:  140:      state->deckCount[i] = 0;
     1104:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      828:  143:	  state->deck[i][j] = estate;
      828:  144:	  state->deckCount[i]++;
        -:  145:	}
     2208:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1932:  148:	  state->deck[i][j] = copper;
     1932:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      355:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  155:    {
      276:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      355:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      276:  166:      state->handCount[i] = 0;
      276:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2212:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2133:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       79:  182:  state->outpostPlayed = 0;
       79:  183:  state->phase = 0;
       79:  184:  state->numActions = 1;
       79:  185:  state->numBuys = 1;
       79:  186:  state->playedCardCount = 0;
       79:  187:  state->whoseTurn = 0;
       79:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      474:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      395:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       79:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       79:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 276 returned 100% blocks executed 94%
      276:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      276:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      276:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      276:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3312:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2760:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2760:  217:    newDeckPos++;
     9601:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     6841:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2760:  221:    state->deckCount[player]--;
        -:  222:  }
     3036:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  224:    state->deck[player][i] = newDeck[i];
     2760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      276:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  320:int supplyCount(int card, struct gameState *state) {
       10:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 1500 returned 100% blocks executed 82%
     1500:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1500:  326:  int count = 0;
        -:  327:
     5000:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  329:    {
     3500:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  331:    }
        -:  332:
     5000:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  334:    {
     3500:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  336:    }
        -:  337:
     5000:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  339:    {
     3500:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  341:    }
        -:  342:
     1500:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 96 returned 100% blocks executed 100%
       96:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       96:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       94:  401:  j = 0;
     2444:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2350:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      216:  406:	  j++;
        -:  407:	}
        -:  408:    }
       94:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       40:  411:      return 1;
        -:  412:    }
        -:  413:
       54:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 1500 returned 100% blocks executed 100%
     1500:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     1500:  420:  int score = 0;
        -:  421:  //score from hand
     4500:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  423:    {
     3000:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     4500:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  434:    {
     3000:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     4500:  444:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
     3000:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  452:    }
        -:  453:
     1500:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 475 returned 100% blocks executed 38%
      475:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      475:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      475:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      475:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      475:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      475:  576:    state->deckCount[player]--;
      475:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      475:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 12 returned 100% blocks executed 20%
       12:  583:int getCost(int cardNumber)
        -:  584:{
       12:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 8%
branch  6 taken 8%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Play adventurer
function play_Adventurer called 3 returned 100% blocks executed 93%
        3:  648:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  649:  int cardDrawn;
        3:  650:  int drawntreasure=0;
        3:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  int temphand[MAX_HAND];
        -:  653:
       21:  654:  while(drawntreasure<2 && state->deckCount[currentPlayer] + state->discardCount[currentPlayer] > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        -:  655:  //while(drawntreasure<2){
       15:  656:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  657:      shuffle(currentPlayer, state);
call    0 never executed
        -:  658:    }
       15:  659:    drawCard(currentPlayer, state);
call    0 returned 100%
       15:  660:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  662:      //drawntreasure++;
        9:  663:      drawntreasure+= drawntreasure;
        -:  664:    else{
        6:  665:      temphand[z]=cardDrawn;
        6:  666:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  667:      z++;
        -:  668:    }
        -:  669:  }
       12:  670:  while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  671:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  672:    z=z-1;
        -:  673:  }
        3:  674:}
        -:  675:
        -:  676:// Play council room
function play_Council_room called 7 returned 100% blocks executed 100%
        7:  677:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  678:  int i;
        -:  679:  //+4 Cards
       35:  680:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  681:  {
       28:  682:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:  }
        -:  684:			
        -:  685:  //+1 Buy
        7:  686:  state->numBuys++;
        -:  687:			
        -:  688:  //Each other player draws a card
       23:  689:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  690:  {
       16:  691:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  692:    {
        9:  693:      drawCard(i, state);
call    0 returned 100%
        -:  694:    }
        -:  695:  }
        -:  696:			
        -:  697:  //put played card in played card pile
        7:  698:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  699:			
        7:  700:}
        -:  701:
        -:  702:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  703:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  704:  int i;
        -:  705:  
        -:  706:  int temphand[MAX_HAND];
        -:  707:  //gain card with cost up to 5
        -:  708:  //Backup hand
    #####:  709:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:  }
        -:  713:  //Backup hand
        -:  714:
        -:  715:  //Update Coins for Buy
    #####:  716:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  717:  i = 0;//Condition to loop on
    #####:  718:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  720:      if (DEBUG)
        -:  721:        printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:      if (DEBUG){
        -:  724:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:      }
        -:  726:    }
    #####:  727:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:      printf("That card is too expensive!\n");
call    0 never executed
        -:  729:
        -:  730:      if (DEBUG){
        -:  731:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:      }
        -:  733:    }
        -:  734:    else{
        -:  735:
        -:  736:      if (DEBUG){
        -:  737:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:      }
        -:  739:
    #####:  740:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  741:      i = 0;//No more buying cards
        -:  742:
        -:  743:      if (DEBUG){
        -:  744:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:      }
        -:  746:
        -:  747:    }
        -:  748:  }     
        -:  749:
        -:  750:  //Reset Hand
    #####:  751:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:    state->hand[currentPlayer][i] = temphand[i];
    #####:  753:    temphand[i] = -1;
        -:  754:  }
        -:  755:  //Reset Hand
        -:  756:  
    #####:  757:}
        -:  758:
        -:  759:// Play mine
function play_Mine called 3 returned 100% blocks executed 90%
        3:  760:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  761:  int i,j;
        3:  762:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
        3:  764:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  765:    {
    #####:  766:      return -1;
        -:  767:    }
        -:  768:		
        3:  769:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  770:    {
    #####:  771:      return -1;
        -:  772:    }
        -:  773:
        3:  774:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  775:    {
        1:  776:      return -1;
        -:  777:    }
        -:  778:
        2:  779:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  780:
        -:  781:    //discard card from hand
        2:  782:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  783:
        -:  784:    //discard trashed card
        4:  785:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  786:    {
        4:  787:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  788:      {
        2:  789:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2:  790:        break;
        -:  791:      }
        -:  792:    }
        2:  793:  return 0;
        -:  794:}
        -:  795:
        -:  796:// Play smithy
function play_Smithy called 7 returned 100% blocks executed 100%
        7:  797:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  798:  int i;
        -:  799:  //+3 Cards
       35:  800:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  801:    {
       28:  802:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  803:    }
        -:  804:			
        -:  805:  //discard card from hand
        7:  806:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7:  807:}
        -:  808:    
        -:  809:    
function cardEffect called 20 returned 100% blocks executed 6%
       20:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int index;
       20:  816:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  817:  int nextPlayer = currentPlayer + 1;
       20:  818:  int tributeRevealedCards[2] = {-1, -1};
       20:  819:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  820:    nextPlayer = 0;
        -:  821:  }
        -:  822:  
        -:  823:  //uses switch to select card and perform actions
       20:  824:  switch( card ) 
branch  0 taken 15%
branch  1 taken 35%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 15%
branch  5 taken 0%
branch  6 taken 35%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  825:    {
        -:  826:    case adventurer:
        3:  827:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
        3:  828:      return 0;
        -:  829:			
        -:  830:    case council_room:
        7:  831:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
        7:  832:      return 0;
        -:  833:			
        -:  834:    case feast:
    #####:  835:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
        3:  842:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        3:  843:      return 0;
        -:  844:			
        -:  845:    case remodel:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  864:	      break;
        -:  865:	    }
        -:  866:	}
    #####:  867:      return 0;
        -:  868:		
        -:  869:    case smithy:
        7:  870:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
        7:  871:      return 0;
        -:  872:		
        -:  873:    case village:
        -:  874:      //+1 Card
    #####:  875:      drawCard(currentPlayer, state);
call    0 never executed
        -:  876:			
        -:  877:      //+2 Actions
    #####:  878:      state->numActions = state->numActions + 2;
        -:  879:			
        -:  880:      //discard played card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  890:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:	    state->discardCount[currentPlayer]++;
    #####:  894:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  895:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  896:	    }
    #####:  897:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:	    state->handCount[currentPlayer]--;
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
    #####:  901:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  902:	    if(DEBUG) {
        -:  903:	      printf("No estate cards in your hand, invalid choice\n");
        -:  904:	      printf("Must gain an estate if there are any\n");
        -:  905:	    }
    #####:  906:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  908:	      state->supplyCount[estate]--;//Decrement estates
    #####:  909:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:		isGameOver(state);
call    0 never executed
        -:  911:	      }
        -:  912:	    }
    #####:  913:	    card_not_discarded = 0;//Exit the loop
        -:  914:	  }
        -:  915:			    
        -:  916:	  else{
    #####:  917:	    p++;//Next card
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:			    
        -:  922:      else{
    #####:  923:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  925:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  926:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	    isGameOver(state);
call    0 never executed
        -:  928:	  }
        -:  929:	}
        -:  930:      }
        -:  931:	    
        -:  932:      
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
call    0 never executed
        -:  938:			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  987:			{
    #####:  988:			  drawCard(i, state);
call    0 never executed
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1002:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1215:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1216:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1217:	  state->discardCount[i]++;
    #####: 1218:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1219:	}
        -: 1220:      }
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
function discardCard called 18 returned 100% blocks executed 78%
       18: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
       18: 1261:  if (trashFlag < 1)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1262:    {
        -: 1263:      //add card to played pile
       11: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
       18: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
       18: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
    #####: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
       18: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
    #####: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
       18: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
       18: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
       18: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
       18: 1292:  return 0;
        -: 1293:}
        -: 1294:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1300:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -: 1301:    {
        1: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
        6: 1310:  if (toFlag == 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1311:    {
        1: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1313:      state->deckCount[player]++;
        -: 1314:    }
        5: 1315:  else if (toFlag == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1316:    {
        3: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
        2: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
        6: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
        6: 1329:  return 0;
        -: 1330:}
        -: 1331:
function updateCoins called 79 returned 100% blocks executed 82%
       79: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
       79: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
      474: 1340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1341:    {
      395: 1342:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1343:	{
      316: 1344:	  state->coins += 1;
        -: 1345:	}
       79: 1346:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1347:	{
    #####: 1348:	  state->coins += 2;
        -: 1349:	}
       79: 1350:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:	{
    #####: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
       79: 1357:  state->coins += bonus;
        -: 1358:
       79: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4140 returned 100% blocks executed 83%
     4140:    8:int compare(const void* a, const void* b) {
     4140:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4140:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1104:   12:    return -1;
     3036:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 79 returned 100% blocks executed 92%
       79:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       79:   44:  SelectStream(1);
call    0 returned 100%
       79:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       79:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       79:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      869:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     8690:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     7900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       79:   73:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       59:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       59:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       79:   87:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       59:   95:      state->supplyCount[estate] = 12;
       59:   96:      state->supplyCount[duchy] = 12;
       59:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       79:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       79:  102:  state->supplyCount[silver] = 40;
       79:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1659:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    13035:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    12245:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      790:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
      228:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      676:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      790:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11455:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      355:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  139:    {
      276:  140:      state->deckCount[i] = 0;
     1104:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      828:  143:	  state->deck[i][j] = estate;
      828:  144:	  state->deckCount[i]++;
        -:  145:	}
     2208:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1932:  148:	  state->deck[i][j] = copper;
     1932:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      355:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  155:    {
      276:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      355:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      276:  166:      state->handCount[i] = 0;
      276:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2212:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2133:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       79:  182:  state->outpostPlayed = 0;
       79:  183:  state->phase = 0;
       79:  184:  state->numActions = 1;
       79:  185:  state->numBuys = 1;
       79:  186:  state->playedCardCount = 0;
       79:  187:  state->whoseTurn = 0;
       79:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      474:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      395:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       79:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       79:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 276 returned 100% blocks executed 94%
      276:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      276:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      276:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      276:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3312:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2760:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2760:  217:    newDeckPos++;
     9601:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     6841:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2760:  221:    state->deckCount[player]--;
        -:  222:  }
     3036:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  224:    state->deck[player][i] = newDeck[i];
     2760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      276:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  320:int supplyCount(int card, struct gameState *state) {
       10:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 40500 returned 100% blocks executed 100%
    40500:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    40500:  326:  int count = 0;
        -:  327:
   121500:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  329:    {
    81000:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
   121500:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  334:    {
    81000:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  336:    }
        -:  337:
   121500:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  339:    {
    81000:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  341:    }
        -:  342:
    40500:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 96 returned 100% blocks executed 100%
       96:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       96:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       94:  401:  j = 0;
     2444:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2350:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      216:  406:	  j++;
        -:  407:	}
        -:  408:    }
       94:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       40:  411:      return 1;
        -:  412:    }
        -:  413:
       54:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 1500 returned 100% blocks executed 100%
     1500:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     1500:  420:  int score = 0;
        -:  421:
        -:  422:    // BUG FIXED FOR ASSIGNMENT 5
     1500:  423:    int deckTotal = 0;
    42000:  424:    for (i = curse; i <= treasure_map; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    40500:  425:        deckTotal += fullDeckCount(player,i,state);
call    0 returned 100%
        -:  426:    }
        -:  427:
        -:  428:
        -:  429:  //score from hand
     4500:  430:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  431:    {
     3000:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  435:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  437:      //if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     3000:  438:      if (state->hand[player][i] == gardens) { score = score + ( deckTotal / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  439:    }
        -:  440:
        -:  441:  //score from discard
     4500:  442:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  443:    {
     3000:  444:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  445:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  446:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  447:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  448:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  449:      //if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     3000:  450:      if (state->discard[player][i] == gardens) { score = score + ( deckTotal / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  451:    }
        -:  452:
        -:  453:  //score from deck
     4500:  454:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  455:    {
     3000:  456:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  457:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  458:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  459:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  460:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  461:      //if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     3000:  462:      if (state->deck[player][i] == gardens) { score = score + ( deckTotal / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  463:    }
        -:  464:
     1500:  465:  return score;
        -:  466:}
        -:  467:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  468:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  469:  int i;	
        -:  470:  int j;
        -:  471:  int highScore;
        -:  472:  int currentPlayer;
        -:  473:
        -:  474:  //get score for each player
    #####:  475:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  476:    {
        -:  477:      //set unused player scores to -9999
    #####:  478:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  479:	{
    #####:  480:	  players[i] = -9999;
        -:  481:	}
        -:  482:      else
        -:  483:	{
    #####:  484:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  485:	}
        -:  486:    }
        -:  487:
        -:  488:  //find highest score
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  493:	{
    #####:  494:	  j = i;
        -:  495:	}
        -:  496:    }
    #####:  497:  highScore = players[j];
        -:  498:
        -:  499:  //add 1 to players who had less turns
    #####:  500:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  504:	{
    #####:  505:	  players[i]++;
        -:  506:	}
        -:  507:    }
        -:  508:
        -:  509:  //find new highest score
    #####:  510:  j = 0;
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  j = i;
        -:  516:	}
        -:  517:    }
    #####:  518:  highScore = players[j];
        -:  519:
        -:  520:  //set winners in array to 1 and rest to 0
    #####:  521:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  522:    {
    #####:  523:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  524:	{
    #####:  525:	  players[i] = 1;
        -:  526:	}
        -:  527:      else
        -:  528:	{
    #####:  529:	  players[i] = 0;
        -:  530:	}
        -:  531:    }
        -:  532:
    #####:  533:  return 0;
        -:  534:}
        -:  535:
function drawCard called 475 returned 100% blocks executed 38%
      475:  536:int drawCard(int player, struct gameState *state)
        -:  537:{	int count;
        -:  538:  int deckCounter;
      475:  539:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  540:    
        -:  541:    //Step 1 Shuffle the discard pile back into a deck
        -:  542:    int i;
        -:  543:    //Move discard to deck
    #####:  544:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  545:      state->deck[player][i] = state->discard[player][i];
    #####:  546:      state->discard[player][i] = -1;
        -:  547:    }
        -:  548:
    #####:  549:    state->deckCount[player] = state->discardCount[player];
    #####:  550:    state->discardCount[player] = 0;//Reset discard
        -:  551:
        -:  552:    //Shufffle the deck
    #####:  553:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  554:   
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  557:    }
        -:  558:    
    #####:  559:    state->discardCount[player] = 0;
        -:  560:
        -:  561:    //Step 2 Draw Card
    #####:  562:    count = state->handCount[player];//Get current player's hand count
        -:  563:    
        -:  564:    if (DEBUG){//Debug statements
        -:  565:      printf("Current hand count: %d\n", count);
        -:  566:    }
        -:  567:    
    #####:  568:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  569:
    #####:  570:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  571:      return -1;
        -:  572:
    #####:  573:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  574:    state->deckCount[player]--;
    #####:  575:    state->handCount[player]++;//Increment hand count
        -:  576:  }
        -:  577:
        -:  578:  else{
      475:  579:    int count = state->handCount[player];//Get current hand count for player
        -:  580:    int deckCounter;
        -:  581:    if (DEBUG){//Debug statements
        -:  582:      printf("Current hand count: %d\n", count);
        -:  583:    }
        -:  584:
      475:  585:    deckCounter = state->deckCount[player];//Create holder for the deck count
      475:  586:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      475:  587:    state->deckCount[player]--;
      475:  588:    state->handCount[player]++;//Increment hand count
        -:  589:  }
        -:  590:
      475:  591:  return 0;
        -:  592:}
        -:  593:
function getCost called 12 returned 100% blocks executed 20%
       12:  594:int getCost(int cardNumber)
        -:  595:{
       12:  596:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 8%
branch  6 taken 8%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  597:    {
        -:  598:    case curse:
    #####:  599:      return 0;
        -:  600:    case estate:
        6:  601:      return 2;
        -:  602:    case duchy:
    #####:  603:      return 5;
        -:  604:    case province:
    #####:  605:      return 8;
        -:  606:    case copper:
        4:  607:      return 0;
        -:  608:    case silver:
        1:  609:      return 3;
        -:  610:    case gold:
        1:  611:      return 6;
        -:  612:    case adventurer:
    #####:  613:      return 6;
        -:  614:    case council_room:
    #####:  615:      return 5;
        -:  616:    case feast:
    #####:  617:      return 4;
        -:  618:    case gardens:
    #####:  619:      return 4;
        -:  620:    case mine:
    #####:  621:      return 5;
        -:  622:    case remodel:
    #####:  623:      return 4;
        -:  624:    case smithy:
    #####:  625:      return 4;
        -:  626:    case village:
    #####:  627:      return 3;
        -:  628:    case baron:
    #####:  629:      return 4;
        -:  630:    case great_hall:
    #####:  631:      return 3;
        -:  632:    case minion:
    #####:  633:      return 5;
        -:  634:    case steward:
    #####:  635:      return 3;
        -:  636:    case tribute:
    #####:  637:      return 5;
        -:  638:    case ambassador:
    #####:  639:      return 3;
        -:  640:    case cutpurse:
    #####:  641:      return 4;
        -:  642:    case embargo: 
    #####:  643:      return 2;
        -:  644:    case outpost:
    #####:  645:      return 5;
        -:  646:    case salvager:
    #####:  647:      return 4;
        -:  648:    case sea_hag:
    #####:  649:      return 4;
        -:  650:    case treasure_map:
    #####:  651:      return 4;
        -:  652:    }
        -:  653:	
    #####:  654:  return -1;
        -:  655:}
        -:  656:
        -:  657:
        -:  658:// Play adventurer
function play_Adventurer called 3 returned 100% blocks executed 93%
        3:  659:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  660:  int cardDrawn;
        3:  661:  int drawntreasure=0;
        3:  662:  int z = 0;// this is the counter for the temp hand
        -:  663:  int temphand[MAX_HAND];
        -:  664:
       21:  665:  while(drawntreasure<2 && state->deckCount[currentPlayer] + state->discardCount[currentPlayer] > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        -:  666:  //while(drawntreasure<2){
       15:  667:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  668:      shuffle(currentPlayer, state);
call    0 never executed
        -:  669:    }
       15:  670:    drawCard(currentPlayer, state);
call    0 returned 100%
       15:  671:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  672:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  673:      //drawntreasure++;
        9:  674:      drawntreasure+= drawntreasure;
        -:  675:    else{
        6:  676:      temphand[z]=cardDrawn;
        6:  677:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  678:      z++;
        -:  679:    }
        -:  680:  }
       12:  681:  while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  682:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  683:    z=z-1;
        -:  684:  }
        3:  685:}
        -:  686:
        -:  687:// Play council room
function play_Council_room called 7 returned 100% blocks executed 100%
        7:  688:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  689:  int i;
        -:  690:  //+4 Cards
       35:  691:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  692:  {
       28:  693:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:  }
        -:  695:			
        -:  696:  //+1 Buy
        7:  697:  state->numBuys++;
        -:  698:			
        -:  699:  //Each other player draws a card
       23:  700:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  701:  {
       16:  702:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  703:    {
        9:  704:      drawCard(i, state);
call    0 returned 100%
        -:  705:    }
        -:  706:  }
        -:  707:			
        -:  708:  //put played card in played card pile
        7:  709:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  710:			
        7:  711:}
        -:  712:
        -:  713:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  714:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  715:  int i;
        -:  716:  
        -:  717:  int temphand[MAX_HAND];
        -:  718:  //gain card with cost up to 5
        -:  719:  //Backup hand
    #####:  720:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  721:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  722:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  723:  }
        -:  724:  //Backup hand
        -:  725:
        -:  726:  //Update Coins for Buy
    #####:  727:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  728:  i = 0;//Condition to loop on
    #####:  729:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  730:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  731:      if (DEBUG)
        -:  732:        printf("None of that card left, sorry!\n");
        -:  733:
        -:  734:      if (DEBUG){
        -:  735:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  736:      }
        -:  737:    }
    #####:  738:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  739:      printf("That card is too expensive!\n");
call    0 never executed
        -:  740:
        -:  741:      if (DEBUG){
        -:  742:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  743:      }
        -:  744:    }
        -:  745:    else{
        -:  746:
        -:  747:      if (DEBUG){
        -:  748:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  749:      }
        -:  750:
    #####:  751:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  752:      i = 0;//No more buying cards
        -:  753:
        -:  754:      if (DEBUG){
        -:  755:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  756:      }
        -:  757:
        -:  758:    }
        -:  759:  }     
        -:  760:
        -:  761:  //Reset Hand
    #####:  762:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  763:    state->hand[currentPlayer][i] = temphand[i];
    #####:  764:    temphand[i] = -1;
        -:  765:  }
        -:  766:  //Reset Hand
        -:  767:  
    #####:  768:}
        -:  769:
        -:  770:// Play mine
function play_Mine called 3 returned 100% blocks executed 90%
        3:  771:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  772:  int i,j;
        3:  773:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:
        3:  775:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  776:    {
    #####:  777:      return -1;
        -:  778:    }
        -:  779:		
        3:  780:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  781:    {
    #####:  782:      return -1;
        -:  783:    }
        -:  784:
        3:  785:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  786:    {
        1:  787:      return -1;
        -:  788:    }
        -:  789:
        2:  790:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  791:
        -:  792:    //discard card from hand
        2:  793:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  794:
        -:  795:    //discard trashed card
        4:  796:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  797:    {
        4:  798:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  799:      {
        2:  800:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2:  801:        break;
        -:  802:      }
        -:  803:    }
        2:  804:  return 0;
        -:  805:}
        -:  806:
        -:  807:// Play smithy
function play_Smithy called 7 returned 100% blocks executed 100%
        7:  808:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  809:  int i;
        -:  810:  //+3 Cards
       35:  811:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  812:    {
       28:  813:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  814:    }
        -:  815:			
        -:  816:  //discard card from hand
        7:  817:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7:  818:}
        -:  819:    
        -:  820:    
function cardEffect called 20 returned 100% blocks executed 6%
       20:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int index;
       20:  827:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  828:  int nextPlayer = currentPlayer + 1;
       20:  829:  int tributeRevealedCards[2] = {-1, -1};
       20:  830:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  831:    nextPlayer = 0;
        -:  832:  }
        -:  833:  
        -:  834:  //uses switch to select card and perform actions
       20:  835:  switch( card ) 
branch  0 taken 15%
branch  1 taken 35%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 15%
branch  5 taken 0%
branch  6 taken 35%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  836:    {
        -:  837:    case adventurer:
        3:  838:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
        3:  839:      return 0;
        -:  840:			
        -:  841:    case council_room:
        7:  842:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
        7:  843:      return 0;
        -:  844:			
        -:  845:    case feast:
    #####:  846:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
        3:  853:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        3:  854:      return 0;
        -:  855:			
        -:  856:    case remodel:
    #####:  857:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  860:	{
    #####:  861:	  return -1;
        -:  862:	}
        -:  863:
    #####:  864:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  865:
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  868:
        -:  869:      //discard trashed card
    #####:  870:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  871:	{
    #####:  872:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  873:	    {
    #####:  874:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  875:	      break;
        -:  876:	    }
        -:  877:	}
    #####:  878:      return 0;
        -:  879:		
        -:  880:    case smithy:
        7:  881:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
        7:  882:      return 0;
        -:  883:		
        -:  884:    case village:
        -:  885:      //+1 Card
    #####:  886:      drawCard(currentPlayer, state);
call    0 never executed
        -:  887:			
        -:  888:      //+2 Actions
    #####:  889:      state->numActions = state->numActions + 2;
        -:  890:			
        -:  891:      //discard played card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case baron:
    #####:  896:      state->numBuys++;//Increase buys by 1!
    #####:  897:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  898:	int p = 0;//Iterator for hand!
    #####:  899:	int card_not_discarded = 1;//Flag for discard set!
    #####:  900:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  901:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  902:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  903:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  904:	    state->discardCount[currentPlayer]++;
    #####:  905:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  906:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  907:	    }
    #####:  908:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  909:	    state->handCount[currentPlayer]--;
    #####:  910:	    card_not_discarded = 0;//Exit the loop
        -:  911:	  }
    #####:  912:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  913:	    if(DEBUG) {
        -:  914:	      printf("No estate cards in your hand, invalid choice\n");
        -:  915:	      printf("Must gain an estate if there are any\n");
        -:  916:	    }
    #####:  917:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  918:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  919:	      state->supplyCount[estate]--;//Decrement estates
    #####:  920:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  921:		isGameOver(state);
call    0 never executed
        -:  922:	      }
        -:  923:	    }
    #####:  924:	    card_not_discarded = 0;//Exit the loop
        -:  925:	  }
        -:  926:			    
        -:  927:	  else{
    #####:  928:	    p++;//Next card
        -:  929:	  }
        -:  930:	}
        -:  931:      }
        -:  932:			    
        -:  933:      else{
    #####:  934:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  935:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  936:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  937:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  938:	    isGameOver(state);
call    0 never executed
        -:  939:	  }
        -:  940:	}
        -:  941:      }
        -:  942:	    
        -:  943:      
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case great_hall:
        -:  947:      //+1 Card
    #####:  948:      drawCard(currentPlayer, state);
call    0 never executed
        -:  949:			
        -:  950:      //+1 Actions
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case minion:
        -:  958:      //+1 action
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:			
    #####:  964:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  965:	{
    #####:  966:	  state->coins = state->coins + 2;
        -:  967:	}
        -:  968:			
    #####:  969:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  970:	{
        -:  971:	  //discard hand
    #####:  972:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  973:	    {
    #####:  974:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  975:	    }
        -:  976:				
        -:  977:	  //draw 4
    #####:  978:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	    {
    #####:  980:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  981:	    }
        -:  982:				
        -:  983:	  //other players discard hand and redraw if hand size > 4
    #####:  984:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  989:		    {
        -:  990:		      //discard hand
    #####:  991:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  992:			{
    #####:  993:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  994:			}
        -:  995:							
        -:  996:		      //draw 4
    #####:  997:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  998:			{
    #####:  999:			  drawCard(i, state);
call    0 never executed
        -: 1000:			}
        -: 1001:		    }
        -: 1002:		}
        -: 1003:	    }
        -: 1004:				
        -: 1005:	}
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case steward:
    #####: 1009:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1010:	{
        -: 1011:	  //+2 cards
    #####: 1012:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1013:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	}
    #####: 1015:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1016:	{
        -: 1017:	  //+2 coins
    #####: 1018:	  state->coins = state->coins + 2;
        -: 1019:	}
        -: 1020:      else
        -: 1021:	{
        -: 1022:	  //trash 2 cards in hand
    #####: 1023:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1024:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1025:	}
        -: 1026:			
        -: 1027:      //discard card from hand
    #####: 1028:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
        -: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
        -: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
        -: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
        -: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1076:	  state->coins += 2;
        -: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1080:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1081:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1094:	{
    #####: 1095:	  return -1;				
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1106:	    {
    #####: 1107:	      j++;
        -: 1108:	    }
        -: 1109:	}
    #####: 1110:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1127:	    }
        -: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1141:		  break;
        -: 1142:		}
        -: 1143:	    }
        -: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
    #####: 1150:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:			}	
    #####: 1169:		      break;
        -: 1170:		    }		
        -: 1171:		}
        -: 1172:					
        -: 1173:	    }
        -: 1174:				
        -: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1226:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1230:	}
        -: 1231:      }
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        -: 1266:}
        -: 1267:
function discardCard called 18 returned 100% blocks executed 78%
       18: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
       18: 1272:  if (trashFlag < 1)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1273:    {
        -: 1274:      //add card to played pile
       11: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
       18: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
       18: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
       18: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
       18: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
       18: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
       18: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
       18: 1303:  return 0;
        -: 1304:}
        -: 1305:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1311:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -: 1312:    {
        1: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
        6: 1321:  if (toFlag == 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1322:    {
        1: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1324:      state->deckCount[player]++;
        -: 1325:    }
        5: 1326:  else if (toFlag == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1327:    {
        3: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
        2: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
        6: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
        6: 1340:  return 0;
        -: 1341:}
        -: 1342:
function updateCoins called 79 returned 100% blocks executed 82%
       79: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
       79: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
      474: 1351:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1352:    {
      395: 1353:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1354:	{
      316: 1355:	  state->coins += 1;
        -: 1356:	}
       79: 1357:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1358:	{
    #####: 1359:	  state->coins += 2;
        -: 1360:	}
       79: 1361:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
       79: 1368:  state->coins += bonus;
        -: 1369:
       79: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4140 returned 100% blocks executed 83%
     4140:    8:int compare(const void* a, const void* b) {
     4140:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4140:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1104:   12:    return -1;
     3036:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 79 returned 100% blocks executed 92%
       79:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       79:   44:  SelectStream(1);
call    0 returned 100%
       79:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       79:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       79:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      869:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     8690:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     7900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       79:   73:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       59:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       59:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       79:   87:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       59:   95:      state->supplyCount[estate] = 12;
       59:   96:      state->supplyCount[duchy] = 12;
       59:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       79:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       79:  102:  state->supplyCount[silver] = 40;
       79:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1659:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    13035:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    12245:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      790:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  114:		{
      228:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      676:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      790:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11455:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      355:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  139:    {
      276:  140:      state->deckCount[i] = 0;
     1104:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      828:  143:	  state->deck[i][j] = estate;
      828:  144:	  state->deckCount[i]++;
        -:  145:	}
     2208:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1932:  148:	  state->deck[i][j] = copper;
     1932:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      355:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  155:    {
      276:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      355:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      276:  166:      state->handCount[i] = 0;
      276:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2212:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2133:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       79:  182:  state->outpostPlayed = 0;
       79:  183:  state->phase = 0;
       79:  184:  state->numActions = 1;
       79:  185:  state->numBuys = 1;
       79:  186:  state->playedCardCount = 0;
       79:  187:  state->whoseTurn = 0;
       79:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      474:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      395:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       79:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       79:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 276 returned 100% blocks executed 94%
      276:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      276:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      276:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      276:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3312:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2760:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2760:  217:    newDeckPos++;
     9601:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     6841:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2760:  221:    state->deckCount[player]--;
        -:  222:  }
     3036:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2760:  224:    state->deck[player][i] = newDeck[i];
     2760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      276:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  320:int supplyCount(int card, struct gameState *state) {
       10:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 40500 returned 100% blocks executed 100%
    40500:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    40500:  326:  int count = 0;
        -:  327:
   121500:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  329:    {
    81000:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  331:    }
        -:  332:
   121500:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  334:    {
    81000:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  336:    }
        -:  337:
   121500:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  339:    {
    81000:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  341:    }
        -:  342:
    40500:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 96 returned 100% blocks executed 100%
       96:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       96:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       94:  401:  j = 0;
     2444:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2350:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
      216:  406:	  j++;
        -:  407:	}
        -:  408:    }
       94:  409:  if ( j >= 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:  410:    {
       40:  411:      return 1;
        -:  412:    }
        -:  413:
       54:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 1500 returned 100% blocks executed 100%
     1500:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     1500:  420:  int score = 0;
        -:  421:
        -:  422:    // BUG FIXED FOR ASSIGNMENT 5
     1500:  423:    int deckTotal = 0;
    42000:  424:    for (i = curse; i <= treasure_map; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    40500:  425:        deckTotal += fullDeckCount(player,i,state);
call    0 returned 100%
        -:  426:    }
     1500:  427:    deckTotal /= 10;
        -:  428:
        -:  429:
        -:  430:  //score from hand
     4500:  431:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  432:    {
     3000:  433:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  434:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  435:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  436:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  437:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  438:      //if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  439:      //if (state->hand[player][i] == gardens) { score = score + ( deckTotal / 10 ); };
     3000:  440:      if (state->hand[player][i] == gardens) { score = score + deckTotal; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  441:    }
        -:  442:
        -:  443:  //score from discard
     4500:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  445:    {
     3000:  446:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  447:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  448:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  449:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  450:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  451:      //if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:      //if (state->discard[player][i] == gardens) { score = score + ( deckTotal / 10 ); };
     3000:  453:      if (state->discard[player][i] == gardens) { score = score + deckTotal; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  454:    }
        -:  455:
        -:  456:  //score from deck
     4500:  457:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  458:    {
     3000:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  462:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3000:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  464:      //if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  465:      //if (state->deck[player][i] == gardens) { score = score + ( deckTotal / 10 ); };
     3000:  466:      if (state->deck[player][i] == gardens) { score = score + deckTotal; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  467:    }
        -:  468:
     1500:  469:  return score;
        -:  470:}
        -:  471:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  472:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  473:  int i;	
        -:  474:  int j;
        -:  475:  int highScore;
        -:  476:  int currentPlayer;
        -:  477:
        -:  478:  //get score for each player
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
        -:  481:      //set unused player scores to -9999
    #####:  482:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  players[i] = -9999;
        -:  485:	}
        -:  486:      else
        -:  487:	{
    #####:  488:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  489:	}
        -:  490:    }
        -:  491:
        -:  492:  //find highest score
    #####:  493:  j = 0;
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:    {
    #####:  496:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  497:	{
    #####:  498:	  j = i;
        -:  499:	}
        -:  500:    }
    #####:  501:  highScore = players[j];
        -:  502:
        -:  503:  //add 1 to players who had less turns
    #####:  504:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  508:	{
    #####:  509:	  players[i]++;
        -:  510:	}
        -:  511:    }
        -:  512:
        -:  513:  //find new highest score
    #####:  514:  j = 0;
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  j = i;
        -:  520:	}
        -:  521:    }
    #####:  522:  highScore = players[j];
        -:  523:
        -:  524:  //set winners in array to 1 and rest to 0
    #####:  525:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  526:    {
    #####:  527:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  528:	{
    #####:  529:	  players[i] = 1;
        -:  530:	}
        -:  531:      else
        -:  532:	{
    #####:  533:	  players[i] = 0;
        -:  534:	}
        -:  535:    }
        -:  536:
    #####:  537:  return 0;
        -:  538:}
        -:  539:
function drawCard called 475 returned 100% blocks executed 38%
      475:  540:int drawCard(int player, struct gameState *state)
        -:  541:{	int count;
        -:  542:  int deckCounter;
      475:  543:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  544:    
        -:  545:    //Step 1 Shuffle the discard pile back into a deck
        -:  546:    int i;
        -:  547:    //Move discard to deck
    #####:  548:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  549:      state->deck[player][i] = state->discard[player][i];
    #####:  550:      state->discard[player][i] = -1;
        -:  551:    }
        -:  552:
    #####:  553:    state->deckCount[player] = state->discardCount[player];
    #####:  554:    state->discardCount[player] = 0;//Reset discard
        -:  555:
        -:  556:    //Shufffle the deck
    #####:  557:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  558:   
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  561:    }
        -:  562:    
    #####:  563:    state->discardCount[player] = 0;
        -:  564:
        -:  565:    //Step 2 Draw Card
    #####:  566:    count = state->handCount[player];//Get current player's hand count
        -:  567:    
        -:  568:    if (DEBUG){//Debug statements
        -:  569:      printf("Current hand count: %d\n", count);
        -:  570:    }
        -:  571:    
    #####:  572:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  573:
    #####:  574:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  575:      return -1;
        -:  576:
    #####:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  578:    state->deckCount[player]--;
    #####:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        -:  582:  else{
      475:  583:    int count = state->handCount[player];//Get current hand count for player
        -:  584:    int deckCounter;
        -:  585:    if (DEBUG){//Debug statements
        -:  586:      printf("Current hand count: %d\n", count);
        -:  587:    }
        -:  588:
      475:  589:    deckCounter = state->deckCount[player];//Create holder for the deck count
      475:  590:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      475:  591:    state->deckCount[player]--;
      475:  592:    state->handCount[player]++;//Increment hand count
        -:  593:  }
        -:  594:
      475:  595:  return 0;
        -:  596:}
        -:  597:
function getCost called 12 returned 100% blocks executed 20%
       12:  598:int getCost(int cardNumber)
        -:  599:{
       12:  600:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 8%
branch  6 taken 8%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  601:    {
        -:  602:    case curse:
    #####:  603:      return 0;
        -:  604:    case estate:
        6:  605:      return 2;
        -:  606:    case duchy:
    #####:  607:      return 5;
        -:  608:    case province:
    #####:  609:      return 8;
        -:  610:    case copper:
        4:  611:      return 0;
        -:  612:    case silver:
        1:  613:      return 3;
        -:  614:    case gold:
        1:  615:      return 6;
        -:  616:    case adventurer:
    #####:  617:      return 6;
        -:  618:    case council_room:
    #####:  619:      return 5;
        -:  620:    case feast:
    #####:  621:      return 4;
        -:  622:    case gardens:
    #####:  623:      return 4;
        -:  624:    case mine:
    #####:  625:      return 5;
        -:  626:    case remodel:
    #####:  627:      return 4;
        -:  628:    case smithy:
    #####:  629:      return 4;
        -:  630:    case village:
    #####:  631:      return 3;
        -:  632:    case baron:
    #####:  633:      return 4;
        -:  634:    case great_hall:
    #####:  635:      return 3;
        -:  636:    case minion:
    #####:  637:      return 5;
        -:  638:    case steward:
    #####:  639:      return 3;
        -:  640:    case tribute:
    #####:  641:      return 5;
        -:  642:    case ambassador:
    #####:  643:      return 3;
        -:  644:    case cutpurse:
    #####:  645:      return 4;
        -:  646:    case embargo: 
    #####:  647:      return 2;
        -:  648:    case outpost:
    #####:  649:      return 5;
        -:  650:    case salvager:
    #####:  651:      return 4;
        -:  652:    case sea_hag:
    #####:  653:      return 4;
        -:  654:    case treasure_map:
    #####:  655:      return 4;
        -:  656:    }
        -:  657:	
    #####:  658:  return -1;
        -:  659:}
        -:  660:
        -:  661:
        -:  662:// Play adventurer
function play_Adventurer called 3 returned 100% blocks executed 93%
        3:  663:void play_Adventurer(struct gameState *state, int currentPlayer){
        -:  664:  int cardDrawn;
        3:  665:  int drawntreasure=0;
        3:  666:  int z = 0;// this is the counter for the temp hand
        -:  667:  int temphand[MAX_HAND];
        -:  668:
       21:  669:  while(drawntreasure<2 && state->deckCount[currentPlayer] + state->discardCount[currentPlayer] > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        -:  670:  //while(drawntreasure<2){
       15:  671:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  672:      shuffle(currentPlayer, state);
call    0 never executed
        -:  673:    }
       15:  674:    drawCard(currentPlayer, state);
call    0 returned 100%
       15:  675:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       15:  676:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  677:      //drawntreasure++;
        9:  678:      drawntreasure+= drawntreasure;
        -:  679:    else{
        6:  680:      temphand[z]=cardDrawn;
        6:  681:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  682:      z++;
        -:  683:    }
        -:  684:  }
       12:  685:  while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  686:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  687:    z=z-1;
        -:  688:  }
        3:  689:}
        -:  690:
        -:  691:// Play council room
function play_Council_room called 7 returned 100% blocks executed 100%
        7:  692:void play_Council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  693:  int i;
        -:  694:  //+4 Cards
       35:  695:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  696:  {
       28:  697:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  698:  }
        -:  699:			
        -:  700:  //+1 Buy
        7:  701:  state->numBuys++;
        -:  702:			
        -:  703:  //Each other player draws a card
       23:  704:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  705:  {
       16:  706:    if ( i != currentPlayer )
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:  707:    {
        9:  708:      drawCard(i, state);
call    0 returned 100%
        -:  709:    }
        -:  710:  }
        -:  711:			
        -:  712:  //put played card in played card pile
        7:  713:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  714:			
        7:  715:}
        -:  716:
        -:  717:// play feast
function play_Feast called 0 returned 0% blocks executed 0%
    #####:  718:void play_Feast(struct gameState *state, int currentPlayer, int choice1 ){
        -:  719:  int i;
        -:  720:  
        -:  721:  int temphand[MAX_HAND];
        -:  722:  //gain card with cost up to 5
        -:  723:  //Backup hand
    #####:  724:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  725:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  726:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  727:  }
        -:  728:  //Backup hand
        -:  729:
        -:  730:  //Update Coins for Buy
    #####:  731:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  732:  i = 0;//Condition to loop on
    #####:  733:  while( i == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  734:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  735:      if (DEBUG)
        -:  736:        printf("None of that card left, sorry!\n");
        -:  737:
        -:  738:      if (DEBUG){
        -:  739:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  740:      }
        -:  741:    }
    #####:  742:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  743:      printf("That card is too expensive!\n");
call    0 never executed
        -:  744:
        -:  745:      if (DEBUG){
        -:  746:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  747:      }
        -:  748:    }
        -:  749:    else{
        -:  750:
        -:  751:      if (DEBUG){
        -:  752:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:      }
        -:  754:
    #####:  755:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  756:      i = 0;//No more buying cards
        -:  757:
        -:  758:      if (DEBUG){
        -:  759:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  760:      }
        -:  761:
        -:  762:    }
        -:  763:  }     
        -:  764:
        -:  765:  //Reset Hand
    #####:  766:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  767:    state->hand[currentPlayer][i] = temphand[i];
    #####:  768:    temphand[i] = -1;
        -:  769:  }
        -:  770:  //Reset Hand
        -:  771:  
    #####:  772:}
        -:  773:
        -:  774:// Play mine
function play_Mine called 3 returned 100% blocks executed 90%
        3:  775:int play_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  776:  int i,j;
        3:  777:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  778:
        3:  779:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  780:    {
    #####:  781:      return -1;
        -:  782:    }
        -:  783:		
        3:  784:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  785:    {
    #####:  786:      return -1;
        -:  787:    }
        -:  788:
        3:  789:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:  790:    {
        1:  791:      return -1;
        -:  792:    }
        -:  793:
        2:  794:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  795:
        -:  796:    //discard card from hand
        2:  797:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  798:
        -:  799:    //discard trashed card
        4:  800:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  801:    {
        4:  802:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  803:      {
        2:  804:        discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2:  805:        break;
        -:  806:      }
        -:  807:    }
        2:  808:  return 0;
        -:  809:}
        -:  810:
        -:  811:// Play smithy
function play_Smithy called 7 returned 100% blocks executed 100%
        7:  812:void play_Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  813:  int i;
        -:  814:  //+3 Cards
       35:  815:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  816:    {
       28:  817:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  818:    }
        -:  819:			
        -:  820:  //discard card from hand
        7:  821:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7:  822:}
        -:  823:    
        -:  824:    
function cardEffect called 20 returned 100% blocks executed 6%
       20:  825:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  826:{
        -:  827:  int i;
        -:  828:  int j;
        -:  829:  int k;
        -:  830:  int index;
       20:  831:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  832:  int nextPlayer = currentPlayer + 1;
       20:  833:  int tributeRevealedCards[2] = {-1, -1};
       20:  834:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  835:    nextPlayer = 0;
        -:  836:  }
        -:  837:  
        -:  838:  //uses switch to select card and perform actions
       20:  839:  switch( card ) 
branch  0 taken 15%
branch  1 taken 35%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 15%
branch  5 taken 0%
branch  6 taken 35%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  840:    {
        -:  841:    case adventurer:
        3:  842:      play_Adventurer(state, currentPlayer);
call    0 returned 100%
        3:  843:      return 0;
        -:  844:			
        -:  845:    case council_room:
        7:  846:      play_Council_room(state, currentPlayer, handPos);
call    0 returned 100%
        7:  847:      return 0;
        -:  848:			
        -:  849:    case feast:
    #####:  850:      play_Feast(state, currentPlayer, choice1);
call    0 never executed
    #####:  851:      return 0;
        -:  852:			
        -:  853:    case gardens:
    #####:  854:      return -1;
        -:  855:			
        -:  856:    case mine:
        3:  857:      play_Mine(state, currentPlayer, handPos, choice1, choice2);
call    0 returned 100%
        3:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case smithy:
        7:  885:      play_Smithy(state, currentPlayer, handPos);
call    0 returned 100%
        7:  886:      return 0;
        -:  887:		
        -:  888:    case village:
        -:  889:      //+1 Card
    #####:  890:      drawCard(currentPlayer, state);
call    0 never executed
        -:  891:			
        -:  892:      //+2 Actions
    #####:  893:      state->numActions = state->numActions + 2;
        -:  894:			
        -:  895:      //discard played card from hand
    #####:  896:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
        -:  951:      //+1 Card
    #####:  952:      drawCard(currentPlayer, state);
call    0 never executed
        -:  953:			
        -:  954:      //+1 Actions
    #####:  955:      state->numActions++;
        -:  956:			
        -:  957:      //discard card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case minion:
        -:  962:      //+1 action
    #####:  963:      state->numActions++;
        -:  964:			
        -:  965:      //discard card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  967:			
    #####:  968:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  969:	{
    #####:  970:	  state->coins = state->coins + 2;
        -:  971:	}
        -:  972:			
    #####:  973:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  974:	{
        -:  975:	  //discard hand
    #####:  976:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  977:	    {
    #####:  978:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //draw 4
    #####:  982:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  985:	    }
        -:  986:				
        -:  987:	  //other players discard hand and redraw if hand size > 4
    #####:  988:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  991:		{
    #####:  992:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  993:		    {
        -:  994:		      //discard hand
    #####:  995:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  998:			}
        -:  999:							
        -: 1000:		      //draw 4
    #####: 1001:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1002:			{
    #####: 1003:			  drawCard(i, state);
call    0 never executed
        -: 1004:			}
        -: 1005:		    }
        -: 1006:		}
        -: 1007:	    }
        -: 1008:				
        -: 1009:	}
    #####: 1010:      return 0;
        -: 1011:		
        -: 1012:    case steward:
    #####: 1013:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
        -: 1015:	  //+2 cards
    #####: 1016:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1017:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1018:	}
    #####: 1019:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
        -: 1021:	  //+2 coins
    #####: 1022:	  state->coins = state->coins + 2;
        -: 1023:	}
        -: 1024:      else
        -: 1025:	{
        -: 1026:	  //trash 2 cards in hand
    #####: 1027:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1028:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1029:	}
        -: 1030:			
        -: 1031:      //discard card from hand
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case tribute:
    #####: 1036:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1037:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1038:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	  state->deckCount[nextPlayer]--;
        -: 1040:	}
    #####: 1041:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1042:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1043:	  state->discardCount[nextPlayer]--;
        -: 1044:	}
        -: 1045:	else{
        -: 1046:	  //No Card to Reveal
        -: 1047:	  if (DEBUG){
        -: 1048:	    printf("No cards to reveal\n");
        -: 1049:	  }
        -: 1050:	}
        -: 1051:      }
        -: 1052:	    
        -: 1053:      else{
    #####: 1054:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1056:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1057:	    state->deckCount[nextPlayer]++;
    #####: 1058:	    state->discard[nextPlayer][i] = -1;
    #####: 1059:	    state->discardCount[nextPlayer]--;
        -: 1060:	  }
        -: 1061:			    
    #####: 1062:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1063:	} 
    #####: 1064:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
    #####: 1067:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1068:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1069:	state->deckCount[nextPlayer]--;
        -: 1070:      }    
        -: 1071:		       
    #####: 1072:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1073:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1074:	state->playedCardCount++;
    #####: 1075:	tributeRevealedCards[1] = -1;
        -: 1076:      }
        -: 1077:
    #####: 1078:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1079:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1080:	  state->coins += 2;
        -: 1081:	}
        -: 1082:		    
    #####: 1083:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1084:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1085:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1086:	}
        -: 1087:	else{//Action Card
    #####: 1088:	  state->numActions = state->numActions + 2;
        -: 1089:	}
        -: 1090:      }
        -: 1091:	    
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case ambassador:
    #####: 1095:      j = 0;		//used to check if player has enough cards to discard
        -: 1096:
    #####: 1097:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
    #####: 1102:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  return -1;
        -: 1105:	}
        -: 1106:
    #####: 1107:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1110:	    {
    #####: 1111:	      j++;
        -: 1112:	    }
        -: 1113:	}
    #####: 1114:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  return -1;				
        -: 1117:	}
        -: 1118:
        -: 1119:      if (DEBUG) 
        -: 1120:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1121:
        -: 1122:      //increase supply count for choosen card by amount being discarded
    #####: 1123:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1124:			
        -: 1125:      //each other player gains a copy of revealed card
    #####: 1126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1127:	{
    #####: 1128:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1129:	    {
    #####: 1130:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1131:	    }
        -: 1132:	}
        -: 1133:
        -: 1134:      //discard played card from hand
    #####: 1135:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1136:
        -: 1137:      //trash copies of cards returned to supply
    #####: 1138:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	    {
    #####: 1142:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1143:		{
    #####: 1144:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1145:		  break;
        -: 1146:		}
        -: 1147:	    }
        -: 1148:	}			
        -: 1149:
    #####: 1150:      return 0;
        -: 1151:		
        -: 1152:    case cutpurse:
        -: 1153:
    #####: 1154:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1162:		    {
    #####: 1163:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1164:		      break;
        -: 1165:		    }
    #####: 1166:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1167:		    {
    #####: 1168:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1169:			{
        -: 1170:			  if (DEBUG)
        -: 1171:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1172:			}	
    #####: 1173:		      break;
        -: 1174:		    }		
        -: 1175:		}
        -: 1176:					
        -: 1177:	    }
        -: 1178:				
        -: 1179:	}				
        -: 1180:
        -: 1181:      //discard played card from hand
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1183:
    #####: 1184:      return 0;
        -: 1185:
        -: 1186:		
        -: 1187:    case embargo: 
        -: 1188:      //+2 Coins
    #####: 1189:      state->coins = state->coins + 2;
        -: 1190:			
        -: 1191:      //see if selected pile is in play
    #####: 1192:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  return -1;
        -: 1195:	}
        -: 1196:			
        -: 1197:      //add embargo token to selected supply pile
    #####: 1198:      state->embargoTokens[choice1]++;
        -: 1199:			
        -: 1200:      //trash card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case outpost:
        -: 1205:      //set outpost flag
    #####: 1206:      state->outpostPlayed++;
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case salvager:
        -: 1213:      //+1 buy
    #####: 1214:      state->numBuys++;
        -: 1215:			
    #####: 1216:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1217:	{
        -: 1218:	  //gain coins equal to trashed card
    #####: 1219:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1220:	  //trash card
    #####: 1221:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1222:	}
        -: 1223:			
        -: 1224:      //discard card
    #####: 1225:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case sea_hag:
    #####: 1229:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1230:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1231:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1232:	  state->discardCount[i]++;
    #####: 1233:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1234:	}
        -: 1235:      }
    #####: 1236:      return 0;
        -: 1237:		
        -: 1238:    case treasure_map:
        -: 1239:      //search hand for another treasure_map
    #####: 1240:      index = -1;
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1244:	    {
    #####: 1245:	      index = i;
    #####: 1246:	      break;
        -: 1247:	    }
        -: 1248:	}
    #####: 1249:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1250:	{
        -: 1251:	  //trash both treasure cards
    #####: 1252:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1253:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1254:
        -: 1255:	  //gain 4 Gold cards
    #####: 1256:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:	    {
    #####: 1258:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1259:	    }
        -: 1260:				
        -: 1261:	  //return success
    #####: 1262:	  return 1;
        -: 1263:	}
        -: 1264:			
        -: 1265:      //no second treasure_map found in hand
    #####: 1266:      return -1;
        -: 1267:    }
        -: 1268:	
    #####: 1269:  return -1;
        -: 1270:}
        -: 1271:
function discardCard called 18 returned 100% blocks executed 78%
       18: 1272:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1273:{
        -: 1274:	
        -: 1275:  //if card is not trashed, added to Played pile 
       18: 1276:  if (trashFlag < 1)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1277:    {
        -: 1278:      //add card to played pile
       11: 1279:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1280:      state->playedCardCount++;
        -: 1281:    }
        -: 1282:	
        -: 1283:  //set played card to -1
       18: 1284:  state->hand[currentPlayer][handPos] = -1;
        -: 1285:	
        -: 1286:  //remove card from player's hand
       18: 1287:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
       18: 1292:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1293:    {
        -: 1294:      //reduce number of cards in hand
    #####: 1295:      state->handCount[currentPlayer]--;
        -: 1296:    }
        -: 1297:  else 	
        -: 1298:    {
        -: 1299:      //replace discarded card with last card in hand
       18: 1300:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1301:      //set last card to -1
       18: 1302:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1303:      //reduce number of cards in hand
       18: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:	
       18: 1307:  return 0;
        -: 1308:}
        -: 1309:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1310:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1311:{
        -: 1312:  //Note: supplyPos is enum of choosen card
        -: 1313:	
        -: 1314:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1315:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -: 1316:    {
        1: 1317:      return -1;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //added card for [whoseTurn] current player:
        -: 1321:  // toFlag = 0 : add to discard
        -: 1322:  // toFlag = 1 : add to deck
        -: 1323:  // toFlag = 2 : add to hand
        -: 1324:
        6: 1325:  if (toFlag == 1)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1326:    {
        1: 1327:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1328:      state->deckCount[player]++;
        -: 1329:    }
        5: 1330:  else if (toFlag == 2)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1331:    {
        3: 1332:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1333:      state->handCount[player]++;
        -: 1334:    }
        -: 1335:  else
        -: 1336:    {
        2: 1337:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1338:      state->discardCount[player]++;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //decrease number in supply pile
        6: 1342:  state->supplyCount[supplyPos]--;
        -: 1343:	 
        6: 1344:  return 0;
        -: 1345:}
        -: 1346:
function updateCoins called 79 returned 100% blocks executed 82%
       79: 1347:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1348:{
        -: 1349:  int i;
        -: 1350:	
        -: 1351:  //reset coin count
       79: 1352:  state->coins = 0;
        -: 1353:
        -: 1354:  //add coins for each Treasure card in player's hand
      474: 1355:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1356:    {
      395: 1357:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1358:	{
      316: 1359:	  state->coins += 1;
        -: 1360:	}
       79: 1361:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1362:	{
    #####: 1363:	  state->coins += 2;
        -: 1364:	}
       79: 1365:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1366:	{
    #####: 1367:	  state->coins += 3;
        -: 1368:	}	
        -: 1369:    }	
        -: 1370:
        -: 1371:  //add bonus
       79: 1372:  state->coins += bonus;
        -: 1373:
       79: 1374:  return 0;
        -: 1375:}
        -: 1376:
        -: 1377:
        -: 1378://end of dominion.c
        -: 1379:
